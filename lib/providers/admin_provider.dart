import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'auth_provider.dart';
import 'advertisement_provider.dart';
import '../services/unified_database_service.dart';
import '../models/user_model.dart';
import '../models/manager_permissions_model.dart';
import '../utils/database_diagnostic.dart';

class AdminUser {
  final String id;
  final String name;
  final String email;
  final String role; // 'admin', 'moderator', 'user'
  final DateTime createdAt;
  final bool isActive;
  final Map<String, dynamic> permissions;
  final List<String> managedCities; // –ì–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–º–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä

  AdminUser({
    required this.id,
    required this.name,
    required this.email,
    required this.role,
    required this.createdAt,
    required this.isActive,
    required this.permissions,
    this.managedCities = const [],
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'email': email,
      'role': role,
      'createdAt': createdAt.toIso8601String(),
      'isActive': isActive,
      'permissions': permissions,
      'managedCities': managedCities,
    };
  }

  factory AdminUser.fromJson(Map<String, dynamic> json) {
    return AdminUser(
      id: json['id'],
      name: json['name'],
      email: json['email'],
      role: json['role'],
      createdAt: DateTime.parse(json['createdAt']),
      isActive: json['isActive'],
      permissions: Map<String, dynamic>.from(json['permissions']),
      managedCities: List<String>.from(json['managedCities'] ?? []),
    );
  }
}

class AppStats {
  final int totalUsers;
  final int activeUsers;
  final int totalOrganizations;
  final int totalReviews;
  final int totalPhotos;
  final int totalFriendships;
  final DateTime lastUpdated;

  AppStats({
    required this.totalUsers,
    required this.activeUsers,
    required this.totalOrganizations,
    required this.totalReviews,
    required this.totalPhotos,
    required this.totalFriendships,
    required this.lastUpdated,
  });

  Map<String, dynamic> toJson() {
    return {
      'totalUsers': totalUsers,
      'activeUsers': activeUsers,
      'totalOrganizations': totalOrganizations,
      'totalReviews': totalReviews,
      'totalPhotos': totalPhotos,
      'totalFriendships': totalFriendships,
      'lastUpdated': lastUpdated.toIso8601String(),
    };
  }

  factory AppStats.fromJson(Map<String, dynamic> json) {
    return AppStats(
      totalUsers: json['totalUsers'],
      activeUsers: json['activeUsers'],
      totalOrganizations: json['totalOrganizations'],
      totalReviews: json['totalReviews'],
      totalPhotos: json['totalPhotos'],
      totalFriendships: json['totalFriendships'],
      lastUpdated: DateTime.parse(json['lastUpdated']),
    );
  }
}

class AdminProvider extends ChangeNotifier {
  List<AdminUser> _users = [];
  AppStats _appStats = AppStats(
    totalUsers: 0,
    activeUsers: 0,
    totalOrganizations: 0,
    totalReviews: 0,
    totalPhotos: 0,
    totalFriendships: 0,
    lastUpdated: DateTime.now(),
  );
  bool _isLoading = false;
  bool _isAdmin = false;
  AuthProvider? _authProvider;
  final UnifiedDatabaseService _databaseService = UnifiedDatabaseService();

  // Getters
  List<AdminUser> get users => _users;
  AppStats get appStats => _appStats;
  bool get isLoading => _isLoading;
  bool get isAdmin => _isAdmin;
  UnifiedDatabaseService get databaseService => _databaseService;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  Future<bool> checkIfAdmin(String email) async {
    return email == 'admin@gmail.com';
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  Future<void> initialize({AuthProvider? authProvider}) async {
    _authProvider = authProvider;
    _setLoading(true);
    await _loadUsersData();
    await _loadAppStats();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await updateStats();
    _setLoading(false);
    
    // –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    notifyListeners();
    print('üîî AdminProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, UI —É–≤–µ–¥–æ–º–ª–µ–Ω');
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> _loadUsersData() async {
    try {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
      print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–î –ó–ê–ì–†–£–ó–ö–û–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
      await DatabaseDiagnostic.printAllData();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ UnifiedDatabaseService
      final dbUsers = await _databaseService.getAllUsers();
      
      print('üîç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò–ó UNIFIED_DATABASE_SERVICE: ${dbUsers.length}');
      for (final user in dbUsers) {
        print('  - ${user.email}: ${user.fullName} (${user.role})');
      }
      
      if (dbUsers.isNotEmpty) {
        print('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ UnifiedDatabaseService: ${dbUsers.length}');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º User –≤ AdminUser
        _users = dbUsers.map((user) {
          return AdminUser(
            id: user.id,
            name: user.fullName,
            email: user.email,
            role: user.role,
            createdAt: user.createdAt,
            isActive: !user.isBlocked,
            permissions: _getDefaultPermissions(user.role),
            managedCities: [], // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
          );
        }).toList();
        
        print('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${_users.length}');
        for (var user in _users) {
          print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email}) - ${user.role}');
        }
      } else {
        print('‚ùå –ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í UNIFIED_DATABASE_SERVICE!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        final prefs = await SharedPreferences.getInstance();
        final oldUsersJson = prefs.getString('users') ?? '[]';
        final oldUsersList = json.decode(oldUsersJson) as List;
        
        print('üîç –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï: ${oldUsersList.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        
        if (oldUsersList.isNotEmpty) {
          print('‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï! –ú–∏–≥—Ä–∏—Ä—É–µ–º...');
          await _databaseService.migrateData();
          
          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º
          final migratedUsers = await _databaseService.getAllUsers();
          print('üîç –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò: ${migratedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
          
          _users = migratedUsers.map((user) {
            return AdminUser(
              id: user.id,
              name: user.fullName,
              email: user.email,
              role: user.role,
              createdAt: user.createdAt,
              isActive: !user.isBlocked,
              permissions: _getDefaultPermissions(user.role),
              managedCities: [],
            );
          }).toList();
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
      if (_users.isEmpty) {
        await _createDemoUsers();
      }

      print('–ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${_users.length}');
      
      // –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      notifyListeners();
      print('üîî UI —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${_users.length}');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> _createDemoUsers() async {
    _users = [
      AdminUser(
        id: '1',
        name: 'Admin',
        email: 'admin@gmail.com',
        role: 'admin',
        createdAt: DateTime.now().subtract(const Duration(days: 30)),
        isActive: true,
        permissions: {
          'manageUsers': true,
          'manageOrganizations': true,
          'viewStats': true,
          'manageAds': true,
          'manageRoles': true,
        },
      ),
      AdminUser(
        id: '2',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        email: 'manager@gmail.com',
        role: 'manager',
        createdAt: DateTime.now().subtract(const Duration(days: 15)),
        isActive: true,
        permissions: {
          'manageUsers': false,
          'manageOrganizations': true,
          'viewStats': true,
          'manageAds': false,
          'manageRoles': false,
        },
      ),
      AdminUser(
        id: '3',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        email: 'maneger@gmail.com',
        role: 'manager',
        createdAt: DateTime.now().subtract(const Duration(days: 10)),
        isActive: true,
        permissions: {
          'manageUsers': false,
          'manageOrganizations': true,
          'viewStats': true,
          'manageAds': false,
          'manageRoles': false,
        },
      ),
    ];
    await _saveUsersData();
    
    // –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    notifyListeners();
    print('üîî UI —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${_users.length}');
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> _loadAppStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final statsJson = prefs.getString('app_stats');
      if (statsJson != null) {
        final statsMap = json.decode(statsJson);
        _appStats = AppStats.fromJson(statsMap);
      } else {
        await _generateDemoStats();
      }

      print('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<void> _generateDemoStats() async {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    final totalUsers = _users.length;
    final activeUsers = _users.where((u) => u.isActive).length;
    
    _appStats = AppStats(
      totalUsers: totalUsers,
      activeUsers: activeUsers,
      totalOrganizations: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
      totalReviews: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
      totalPhotos: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
      totalFriendships: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π
      lastUpdated: DateTime.now(),
    );
    await _saveAppStats();
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> _saveUsersData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('admin_users', json.encode(_users.map((e) => e.toJson()).toList()));
      print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<void> _saveAppStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('app_stats', json.encode(_appStats.toJson()));
      print('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> addUser(String name, String email, String role) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      if (_users.any((u) => u.email == email)) {
        return false;
      }

      final user = AdminUser(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: name,
        email: email,
        role: role,
        createdAt: DateTime.now(),
        isActive: true,
        permissions: _getDefaultPermissions(role),
      );

      _users.add(user);
      await _saveUsersData();
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      final unifiedUser = User(
        id: user.id,
        firstName: user.name.split(' ').first,
        lastName: user.name.split(' ').length > 1 ? user.name.split(' ').last : '',
        email: user.email,
        phone: '',
        createdAt: user.createdAt,
        isEmailVerified: true,
        role: user.role,
        isBlocked: !user.isActive,
        lastLoginAt: DateTime.now(),
      );
      
      await _databaseService.saveUser(unifiedUser);
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –µ–¥–∏–Ω—É—é –±–∞–∑—É: ${user.email}');
      
      notifyListeners();
      return true;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ —Ä–æ–ª–∏
  Map<String, dynamic> _getDefaultPermissions(String role) {
    switch (role) {
      case 'admin':
        return {
          'manageUsers': true,
          'manageOrganizations': true,
          'viewStats': true,
          'manageAds': true,
          'manageRoles': true,
        };
      case 'manager':
        return {
          'manageUsers': false,
          'manageOrganizations': true,
          'viewStats': true,
          'manageAds': false,
          'manageRoles': false,
        };
      default:
        return {
          'manageUsers': false,
          'manageOrganizations': false,
          'viewStats': false,
          'manageAds': false,
          'manageRoles': false,
        };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> updateUserRole(String userId, String newRole) async {
    try {
      final userIndex = _users.indexWhere((u) => u.id == userId);
      if (userIndex != -1) {
        _users[userIndex] = AdminUser(
          id: _users[userIndex].id,
          name: _users[userIndex].name,
          email: _users[userIndex].email,
          role: newRole,
          createdAt: _users[userIndex].createdAt,
          isActive: _users[userIndex].isActive,
          permissions: _getDefaultPermissions(newRole),
          managedCities: _users[userIndex].managedCities,
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        await _saveUsersData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        final user = await _databaseService.getUserById(userId);
        if (user != null) {
          final updatedUser = user.copyWith(role: newRole);
          await _databaseService.updateUser(updatedUser);
          print('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î: ${user.email} -> $newRole');
        }
        
        notifyListeners();
        
        print('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${_users[userIndex].name} -> $newRole');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: $e');
    }
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> toggleUserStatus(String userId) async {
    try {
      final userIndex = _users.indexWhere((u) => u.id == userId);
      if (userIndex != -1) {
        _users[userIndex] = AdminUser(
          id: _users[userIndex].id,
          name: _users[userIndex].name,
          email: _users[userIndex].email,
          role: _users[userIndex].role,
          createdAt: _users[userIndex].createdAt,
          isActive: !_users[userIndex].isActive,
          permissions: _users[userIndex].permissions,
          managedCities: _users[userIndex].managedCities,
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        await _saveUsersData();
        notifyListeners();
        
        print('–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω: ${_users[userIndex].name} -> ${_users[userIndex].isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> deleteUser(String userId) async {
    try {
      _users.removeWhere((u) => u.id == userId);
      await _saveUsersData();
      notifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<void> updateStats() async {
    try {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final totalUsers = _users.length;
      final activeUsers = _users.where((u) => u.isActive).length;
      final managers = _users.where((u) => u.role == 'manager').length;
      final admins = _users.where((u) => u.role == 'admin').length;
      
      _appStats = AppStats(
        totalUsers: totalUsers,
        activeUsers: activeUsers,
        totalOrganizations: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        totalReviews: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        totalPhotos: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
        totalFriendships: 0, // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π
        lastUpdated: DateTime.now(),
      );
      await _saveAppStats();
      notifyListeners();
      
      print('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $totalUsers, –ê–∫—Ç–∏–≤–Ω—ã—Ö: $activeUsers, –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: $managers, –ê–¥–º–∏–Ω–æ–≤: $admins');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> refreshUsers() async {
    await _loadUsersData();
    notifyListeners();
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> forceSaveAllUsers() async {
    try {
      print('üîç –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
      for (final adminUser in _users) {
        final user = User(
          id: adminUser.id,
          firstName: adminUser.name.split(' ').first,
          lastName: adminUser.name.split(' ').length > 1 ? adminUser.name.split(' ').last : '',
          email: adminUser.email,
          phone: '',
          createdAt: adminUser.createdAt,
          isEmailVerified: true,
          role: adminUser.role,
          isBlocked: !adminUser.isActive,
          lastLoginAt: DateTime.now(),
        );
        
        await _databaseService.saveUser(user);
        print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await _loadUsersData();
      notifyListeners();
      
      print('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  Future<void> updateManagerCities(String userId, List<String> cityIds) async {
    try {
      final userIndex = _users.indexWhere((user) => user.id == userId);
      if (userIndex != -1) {
        _users[userIndex] = AdminUser(
          id: _users[userIndex].id,
          name: _users[userIndex].name,
          email: _users[userIndex].email,
          role: _users[userIndex].role,
          createdAt: _users[userIndex].createdAt,
          isActive: _users[userIndex].isActive,
          permissions: _users[userIndex].permissions,
          managedCities: cityIds,
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        await _saveUsersData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        final user = await _databaseService.getUserById(userId);
        if (user != null) {
          // –°–æ–∑–¥–∞–µ–º ManagerPermissions –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
          final permissions = ManagerPermissions(
            managerId: userId,
            cityIds: cityIds,
            canManageAds: true,
            canManageOrganizations: true,
            createdAt: DateTime.now(),
            allowedCities: cityIds,
            canAddAds: true,
          );
          await _databaseService.saveManagerPermissions(permissions);
          print('‚úÖ –ì–æ—Ä–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: ${user.email} - ${cityIds.length} –≥–æ—Ä–æ–¥–æ–≤');
        }
        
        notifyListeners();
        
        print('–ì–æ—Ä–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${_users[userIndex].name} - ${cityIds.length} –≥–æ—Ä–æ–¥–æ–≤');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  List<String> getManagerCities(String userId) {
    try {
      final user = _users.firstWhere((user) => user.id == userId);
      return user.managedCities;
    } catch (e) {
      return [];
    }
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }
}
