import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/user_model.dart';
import '../services/email_service_simple.dart';
import '../services/unified_database_service.dart';
import '../services/cross_platform_sync_service.dart';
import '../utils/database_diagnostic.dart';

class AuthProvider extends ChangeNotifier {
  User? _currentUser;
  bool _isLoading = false;
  String? _errorMessage;
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  Map<String, String> _pendingRegistration = {};
  final GoogleSignIn _googleSignIn = GoogleSignIn(
    // –í–∫–ª—é—á–∞–µ–º Google Sign-In –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —Å Client ID
    clientId: kIsWeb ? '230044526443-o5c8ns3lpd1a36phjc6acto5klr05g0u.apps.googleusercontent.com' : null,
    scopes: ['email', 'profile'],
  );
  final EmailServiceSimple _emailService = EmailServiceSimple();
  final UnifiedDatabaseService _databaseService = UnifiedDatabaseService();

  User? get currentUser => _currentUser;
  bool get isAuthenticated => _currentUser != null;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  
  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> loadUserSession() async {
    await _loadUserFromStorage();
  }

  AuthProvider() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI
    Future.microtask(() => _loadUserFromStorage());
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _loadUserFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userJson = prefs.getString('current_user');
      
      if (userJson != null) {
        final userMap = json.decode(userJson) as Map<String, dynamic>;
        final user = User.fromJson(userMap);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if (user.isEmailVerified) {
          _currentUser = user;
          print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${user.fullName}');
        } else {
          // –ï—Å–ª–∏ email –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          print('Email –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
          await prefs.remove('current_user');
          _currentUser = null;
        }
        notifyListeners();
      } else {
        print('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      try {
        final prefs = await SharedPreferences.getInstance();
        await prefs.remove('current_user');
      } catch (clearError) {
        print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $clearError');
      }
      _currentUser = null;
      notifyListeners();
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _saveUserToStorage(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prefs.setString('current_user', json.encode(user.toJson()));
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await _databaseService.saveUser(user);
      
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –µ–¥–∏–Ω–æ–π –±–∞–∑–µ: ${user.fullName}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _clearUserFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('current_user');
      print('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É
  void _setError(String? error) {
    _errorMessage = error;
    notifyListeners();
  }

  /// –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É
  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º email
  Future<bool> isUserRegistered(String email) async {
    try {
      final existingUser = await _databaseService.getUserByEmail(email);
      return existingUser != null;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> forceSyncAllUsers() async {
    try {
      print('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã
      final allUsers = await _databaseService.getAllUsers();
      print('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –µ–¥–∏–Ω–æ–π –±–∞–∑–µ: ${allUsers.length}');
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ CrossPlatformSyncService
      await CrossPlatformSyncService().syncUsers();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final syncedUsers = await CrossPlatformSyncService().loadSyncedUsers();
      print('üîç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${syncedUsers.length}');
      
      for (final user in syncedUsers) {
        print('  - ${user.email}: ${user.fullName} (${user.role})');
      }
      
      print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google
  Future<bool> signUpWithGoogle() async {
    try {
      _setLoading(true);
      _clearError();

      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      if (googleUser == null) {
        _setError('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        _setLoading(false);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º email
      final isRegistered = await isUserRegistered(googleUser.email);
      if (isRegistered) {
        _setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${googleUser.email} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
        _setLoading(false);
        return false;
      }

      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Google
      final user = User(
        id: googleUser.id,
        firstName: googleUser.displayName?.split(' ').first ?? '',
        lastName: (googleUser.displayName?.split(' ').length ?? 0) > 1 
            ? googleUser.displayName!.split(' ').sublist(1).join(' ') 
            : '',
        email: googleUser.email,
        phone: '', // Google –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω
        profileImageUrl: googleUser.photoUrl,
        createdAt: DateTime.now(),
        isEmailVerified: true, // Google –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
        role: googleUser.email == 'admin@gmail.com' ? 'admin' : 'user', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        lastLoginAt: DateTime.now(),
      );

      _currentUser = user;
      await _saveUserToStorage(user);
      
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Google: ${user.email}');
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ß–ï–†–ï–ó GOOGLE:');
      await DatabaseDiagnostic.printAllData();
      
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google: $e');
      _setLoading(false);
      return false;
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  Future<bool> signUpWithEmail({
    required String firstName,
    required String lastName,
    required String email,
    required String phone,
  }) async {
    try {
      _setLoading(true);
      _clearError();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º email
      final isRegistered = await isUserRegistered(email);
      if (isRegistered) {
        _setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email $email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
        _setLoading(false);
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      final success = await _emailService.sendVerificationCode(email);
      if (!success) {
        _setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        _setLoading(false);
        return false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      _pendingRegistration[email] = json.encode({
        'firstName': firstName,
        'lastName': lastName,
        'phone': phone,
      });

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞)
      final user = User(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        firstName: firstName,
        lastName: lastName,
        email: email,
        phone: phone,
        createdAt: DateTime.now(),
        isEmailVerified: false,
      );

      print('üîç –°–û–ó–î–ê–ù –í–†–ï–ú–ï–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.email}');
      _currentUser = user;
      await _saveUserToStorage(user);
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
      print('üîç –í–†–ï–ú–ï–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –°–û–•–†–ê–ù–ï–ù –í –ë–î (–∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞)');
      
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      _setLoading(false);
      return false;
    }
  }

  /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∫–æ–¥–∞
  Future<bool> verifyEmailCode(String code) async {
    try {
      _setLoading(true);
      _clearError();

      if (_currentUser == null) {
        _setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        _setLoading(false);
        return false;
      }

      final isValid = _emailService.verifyCode(_currentUser!.email, code);
      if (!isValid) {
        _setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        _setLoading(false);
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final verifiedUser = _currentUser!.copyWith(
        isEmailVerified: true,
        role: _currentUser!.email == 'admin@gmail.com' ? 'admin' : 'user',
        lastLoginAt: DateTime.now(),
      );

      _currentUser = verifiedUser;
      await _saveUserToStorage(verifiedUser);
      
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${verifiedUser.email}');
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:');
      await DatabaseDiagnostic.printAllData();
      
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: $e');
      _setLoading(false);
      return false;
    }
  }

  /// –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
  Future<bool> signInWithEmail(String email, {String? firstName, String? lastName, String? phone}) async {
    try {
      _setLoading(true);
      _clearError();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      final success = await _emailService.sendVerificationCode(email);
      if (!success) {
        _setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        _setLoading(false);
        return false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (firstName != null && lastName != null) {
        _pendingRegistration[email] = json.encode({
          'firstName': firstName,
          'lastName': lastName,
          'phone': phone ?? '',
        });
      }

      // –ù–ï —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      _setLoading(false);
      return false;
    }
  }

  /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ –∫–æ–¥—É
  Future<bool> signInWithCode(String email, String code) async {
    try {
      _setLoading(true);
      _clearError();

      final isValid = _emailService.verifyCode(email, code);
      if (!isValid) {
        _setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        _setLoading(false);
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      String firstName = '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      String lastName = '';
      String phone = '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      if (_pendingRegistration.containsKey(email)) {
        final registrationJson = _pendingRegistration[email];
        if (registrationJson != null) {
          final registrationData = json.decode(registrationJson);
          firstName = registrationData['firstName'] ?? '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
          lastName = registrationData['lastName'] ?? '';
          phone = registrationData['phone'] ?? '';
          _pendingRegistration.remove(email); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }
      } else if (_currentUser != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        firstName = _currentUser!.firstName;
        lastName = _currentUser!.lastName;
        phone = _currentUser!.phone;
      }
      
      final user = User(
        id: email,
        firstName: firstName,
        lastName: lastName,
        email: email,
        phone: phone,
        createdAt: DateTime.now(),
        isEmailVerified: true,
        role: email == 'admin@gmail.com' ? 'admin' : 'user', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        lastLoginAt: DateTime.now(),
      );

      _currentUser = user;
      await _saveUserToStorage(user);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      final existingUser = await _databaseService.getUserByEmail(user.email);
      if (existingUser != null) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        final updatedUser = user.copyWith(
          role: existingUser.role, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
          createdAt: existingUser.createdAt, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        );
        await _databaseService.saveUser(updatedUser);
        _currentUser = updatedUser;
        await _saveUserToStorage(updatedUser);
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.email} (—Ä–æ–ª—å: ${existingUser.role})');
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${user.email}');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í signInWithCode:');
        await DatabaseDiagnostic.printAllData();
      }
      
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      _setLoading(false);
      return false;
    }
  }

  /// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
  Future<bool> resendCode(String email) async {
    try {
      _setLoading(true);
      _clearError();

      final success = await _emailService.sendVerificationCode(email);
      if (!success) {
        _setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        _setLoading(false);
        return false;
      }

      _setLoading(false);
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: $e');
      _setLoading(false);
      return false;
    }
  }

  /// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> signOut() async {
    try {
      _setLoading(true);
      
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞
      await _googleSignIn.signOut();
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      _currentUser = null;
      _pendingRegistration.clear(); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await _clearUserFromStorage();
      
      _setLoading(false);
      notifyListeners();
      print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: $e');
      _setLoading(false);
      notifyListeners();
    }
  }


  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
  int getRemainingCodeTime(String email) {
    return _emailService.getRemainingTime(email);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  bool get isAdmin {
    return _currentUser?.email == 'admin@gmail.com';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
  bool get isManager {
    return _currentUser?.email == 'manager@gmail.com' || _currentUser?.email == 'maneger@gmail.com';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String get userRole {
    if (isAdmin) return 'admin';
    if (isManager) return 'manager';
    return 'user';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  Future<List<User>> getAllUsers() async {
    try {
      return await _databaseService.getAllUsers();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  Future<bool> updateUserRole(String userId, String newRole) async {
    try {
      final user = await _databaseService.getUserById(userId);
      if (user != null) {
        final updatedUser = user.copyWith(role: newRole);
        await _databaseService.saveUser(updatedUser);
        return true;
      }
      return false;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: $e');
      return false;
    }
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  Future<bool> toggleUserBlock(String userId) async {
    try {
      final user = await _databaseService.getUserById(userId);
      if (user != null) {
        final updatedUser = user.copyWith(isBlocked: !user.isBlocked);
        await _databaseService.saveUser(updatedUser);
        return true;
      }
      return false;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return false;
    }
  }
}
