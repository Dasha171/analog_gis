import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:latlong2/latlong.dart' as latlng;
import 'dart:math' as math;
import '../models/route_model.dart';
import '../services/route_service.dart' as route_service;
import 'map_provider.dart';

class RouteProvider extends ChangeNotifier {
  final route_service.RouteService _routeService = route_service.RouteService();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
  List<route_service.SearchResult> _searchResults = [];
  bool _isSearching = false;
  String _searchQuery = '';
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  List<RouteResult> _routes = [];
  RouteResult? _selectedRoute;
  bool _isBuildingRoute = false;
  
  // –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  double? _currentLat;
  double? _currentLng;
  double? _destinationLat;
  double? _destinationLng;
  String _destinationName = '';
  String _currentLocationName = '–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
  
  // –†–µ–∂–∏–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  bool _isRouteMode = false;
  
  // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  TransportType? _selectedTransportType;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  final TextEditingController _destinationController = TextEditingController();
  
  // –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  List<RouteResult> _routeHistory = [];
  
  // Getters
  List<route_service.SearchResult> get searchResults => _searchResults;
  bool get isSearching => _isSearching;
  String get searchQuery => _searchQuery;
  List<RouteResult> get routes => _routes;
  RouteResult? get selectedRoute => _selectedRoute;
  bool get isBuildingRoute => _isBuildingRoute;
  double? get currentLat => _currentLat;
  double? get currentLng => _currentLng;
  double? get destinationLat => _destinationLat;
  double? get destinationLng => _destinationLng;
  String get destinationName => _destinationName;
  String get currentLocationName => _currentLocationName;
  bool get isRouteMode => _isRouteMode;
  TransportType? get selectedTransportType => _selectedTransportType;
  TextEditingController get destinationController => _destinationController;
  List<RouteResult> get routeHistory => _routeHistory;
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  void setRouteMode(bool isRouteMode) {
    _isRouteMode = isRouteMode;
    notifyListeners();
  }
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  void setDestinationName(String name) {
    _destinationName = name;
    notifyListeners();
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  void setCurrentLocationName(String name) {
    _currentLocationName = name;
    notifyListeners();
  }
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  void setSelectedTransportType(TransportType transportType) {
    _selectedTransportType = transportType;
    notifyListeners();
  }
  
  /// –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –º–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  void swapLocations() {
    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    final tempLat = _currentLat;
    final tempLng = _currentLng;
    final tempCurrentName = _currentLocationName;
    
    _currentLat = _destinationLat;
    _currentLng = _destinationLng;
    _currentLocationName = _destinationName;
    
    _destinationLat = tempLat;
    _destinationLng = tempLng;
    _destinationName = tempCurrentName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    _destinationController.text = _destinationName;
    
    notifyListeners();
  }
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  void setQuickDestination(String destination) {
    _destinationName = destination;
    _destinationController.text = destination;
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –º–µ—Å—Ç
    switch (destination) {
      case '–î–æ–º':
        _destinationLat = 43.238949;
        _destinationLng = 76.889709;
        break;
      case '–†–∞–±–æ—Ç–∞':
        _destinationLat = 43.240000;
        _destinationLng = 76.890000;
        break;
    }
    
    notifyListeners();
  }
  
  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤
  void addToRouteHistory(String destinationName) {
    if (_currentLat != null && _currentLng != null && 
        _destinationLat != null && _destinationLng != null) {
      
      final route = RouteResult(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        startLat: _currentLat!,
        startLng: _currentLng!,
        endLat: _destinationLat!,
        endLng: _destinationLng!,
        transportType: _selectedTransportType ?? TransportType.car,
        distance: _calculateDistance(_currentLat!, _currentLng!, _destinationLat!, _destinationLng!) / 1000,
        duration: Duration(seconds: getTransportDuration(_selectedTransportType ?? TransportType.car) ?? 1200),
        cost: 0.0,
        points: [
          LatLng(_currentLat!, _currentLng!),
          LatLng(_destinationLat!, _destinationLng!),
        ],
        color: RouteColor.green,
        hasTraffic: false,
        hasAccidents: false,
        steps: [],
      );
      
      _routeHistory.insert(0, route);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      if (_routeHistory.length > 10) {
        _routeHistory = _routeHistory.take(10).toList();
      }
      
      notifyListeners();
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  int? getTransportDuration(TransportType transportType) {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    if (_currentLat == null || _currentLng == null || 
        _destinationLat == null || _destinationLng == null) {
      return null;
    }
    
    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    final baseTimes = {
      TransportType.car: 15,
      TransportType.bus: 25,
      TransportType.walking: 45,
      TransportType.taxi: 12,
      TransportType.bicycle: 20,
      TransportType.scooter: 18,
      TransportType.truck: 30,
    };
    
    return (baseTimes[transportType] ?? 20) * 60; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
  }
  
  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  Future<void> buildRouteForTransport(TransportType transportType) async {
    if (_currentLat == null || _currentLng == null || 
        _destinationLat == null || _destinationLng == null) {
      return;
    }
    
    _isBuildingRoute = true;
    notifyListeners();
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      await Future.delayed(const Duration(seconds: 1));
      
      final route = RouteResult(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        startLat: _currentLat!,
        startLng: _currentLng!,
        endLat: _destinationLat!,
        endLng: _destinationLng!,
        transportType: transportType,
        distance: _calculateDistance(_currentLat!, _currentLng!, _destinationLat!, _destinationLng!) / 1000,
        duration: Duration(seconds: getTransportDuration(transportType) ?? 1200),
        cost: transportType == TransportType.taxi ? 500.0 : 0.0,
        points: [
          LatLng(_currentLat!, _currentLng!),
          LatLng(_destinationLat!, _destinationLng!),
        ],
        color: transportType == TransportType.car ? RouteColor.green : RouteColor.blue,
        hasTraffic: transportType == TransportType.car,
        hasAccidents: false,
        steps: [],
      );
      
      _routes = [route];
      _selectedRoute = route;
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    } finally {
      _isBuildingRoute = false;
      notifyListeners();
    }
  }
  
  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  void buildRouteOnMap(RouteResult route) {
    _selectedRoute = route;
    notifyListeners();
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    print('üìç –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ: ${route.startLat}, ${route.startLng} ‚Üí ${route.endLat}, ${route.endLng}');
  }
  
  /// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    const double earthRadius = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    
    final double dLat = (lat2 - lat1) * (3.14159265359 / 180);
    final double dLng = (lng2 - lng1) * (3.14159265359 / 180);
    
    final double a = math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(lat1 * math.pi / 180) * math.cos(lat2 * math.pi / 180) * 
        math.sin(dLng / 2) * math.sin(dLng / 2);
    final double c = 2 * math.asin(math.sqrt(a));
    
    return earthRadius * c;
  }
  
  /// –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  Future<void> searchAddresses(String query) async {
    if (query.isEmpty) {
      _searchResults = [];
      _searchQuery = '';
      notifyListeners();
      return;
    }
    
    _isSearching = true;
    _searchQuery = query;
    notifyListeners();
    
    try {
      _searchResults = await _routeService.searchAddresses(query);
      print('üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: ${_searchResults.length}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: $e');
      _searchResults = [];
    } finally {
      _isSearching = false;
      notifyListeners();
    }
  }
  
  /// –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  void selectDestination(route_service.SearchResult result) {
    _destinationLat = result.latitude;
    _destinationLng = result.longitude;
    _destinationName = result.name;
    
    print('üìç –í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${result.name} (${result.latitude}, ${result.longitude})');
    
    // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    _searchResults = [];
    _searchQuery = '';
    
    notifyListeners();
  }
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  void setCurrentLocation(double lat, double lng) {
    _currentLat = lat;
    _currentLng = lng;
    print('üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ($lat, $lng)');
    notifyListeners();
  }
  
  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  Future<void> buildAllRoutes(BuildContext context) async {
    if (_currentLat == null || _currentLng == null || 
        _destinationLat == null || _destinationLng == null) {
      print('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
      return;
    }
    
    _isBuildingRoute = true;
    _routes = [];
    notifyListeners();
    
    try {
      print('üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...');
      
      // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      final transportTypes = TransportType.values;
      final List<RouteResult> allRoutes = [];
      
      for (final transportType in transportTypes) {
        try {
          final route = await _routeService.buildRoute(
            startLat: _currentLat!,
            startLng: _currentLng!,
            endLat: _destinationLat!,
            endLng: _destinationLng!,
            transportType: transportType,
          );
          allRoutes.add(route);
          print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${route.transportName} - ${route.formattedDuration}');
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ${transportType.name}: $e');
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      allRoutes.sort((a, b) => a.duration.compareTo(b.duration));
      
      _routes = allRoutes;
      _selectedRoute = allRoutes.isNotEmpty ? allRoutes.first : null;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—É
      if (_selectedRoute != null) {
        // –ü–æ–ª—É—á–∞–µ–º MapProvider –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
        final mapProvider = Provider.of<MapProvider>(context, listen: false);
        mapProvider.setRoute(_selectedRoute!);
      }
      
      print('‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${_routes.length}');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: $e');
    } finally {
      _isBuildingRoute = false;
      notifyListeners();
    }
  }
  
  /// –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
  void selectRoute(RouteResult route) {
    _selectedRoute = route;
    print('üó∫Ô∏è –í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç: ${route.transportName} - ${route.formattedDuration}');
    notifyListeners();
  }
  
  /// –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  void clearRoutes() {
    _routes = [];
    _selectedRoute = null;
    _destinationLat = null;
    _destinationLng = null;
    _destinationName = '';
    notifyListeners();
  }
  
  /// –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  void clearSearch() {
    _searchResults = [];
    _searchQuery = '';
    notifyListeners();
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  RouteResult? getRouteByTransport(TransportType transportType) {
    try {
      return _routes.firstWhere((route) => route.transportType == transportType);
    } catch (e) {
      return null;
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  bool hasRouteForTransport(TransportType transportType) {
    return _routes.any((route) => route.transportType == transportType);
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
  RouteResult? get bestRoute {
    if (_routes.isEmpty) return null;
    
    // –ò—â–µ–º –∑–µ–ª–µ–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
    final greenRoute = _routes.firstWhere(
      (route) => route.color == RouteColor.green,
      orElse: () => _routes.first,
    );
    
    return greenRoute;
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  List<RouteResult> get alternativeRoutes {
    if (_routes.isEmpty) return [];
    
    final best = bestRoute;
    if (best == null) return _routes;
    
    return _routes.where((route) => route.id != best.id).toList();
  }
}