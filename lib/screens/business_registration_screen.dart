import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import '../models/poi_model.dart';

class BusinessRegistrationScreen extends StatefulWidget {
  const BusinessRegistrationScreen({super.key});

  @override
  State<BusinessRegistrationScreen> createState() => _BusinessRegistrationScreenState();
}

class _BusinessRegistrationScreenState extends State<BusinessRegistrationScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _addressController = TextEditingController();
  final _phoneController = TextEditingController();
  final _websiteController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _openingHoursController = TextEditingController();
  
  String _selectedCategory = 'restaurant';
  LatLng? _selectedLocation;
  bool _isLoading = false;
  
  final List<Map<String, String>> _categories = [
    {'value': 'restaurant', 'label': '–†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ', 'icon': 'üçΩÔ∏è'},
    {'value': 'pharmacy', 'label': '–ê–ø—Ç–µ–∫–∞', 'icon': 'üíä'},
    {'value': 'shopping', 'label': '–ú–∞–≥–∞–∑–∏–Ω', 'icon': 'üõçÔ∏è'},
    {'value': 'gas_station', 'label': '–ó–∞–ø—Ä–∞–≤–∫–∞', 'icon': '‚õΩ'},
    {'value': 'bank', 'label': '–ë–∞–Ω–∫', 'icon': 'üè¶'},
    {'value': 'hospital', 'label': '–ë–æ–ª—å–Ω–∏—Ü–∞', 'icon': 'üè•'},
    {'value': 'hotel', 'label': '–û—Ç–µ–ª—å', 'icon': 'üè®'},
    {'value': 'entertainment', 'label': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'icon': 'üé≠'},
    {'value': 'gym', 'label': '–°–ø–æ—Ä—Ç–∑–∞–ª', 'icon': 'üí™'},
    {'value': 'beauty', 'label': '–ö—Ä–∞—Å–æ—Ç–∞', 'icon': 'üíÖ'},
    {'value': 'education', 'label': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'icon': 'üìö'},
    {'value': 'other', 'label': '–î—Ä—É–≥–æ–µ', 'icon': 'üìç'},
  ];

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    _phoneController.dispose();
    _websiteController.dispose();
    _descriptionController.dispose();
    _openingHoursController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'),
        actions: [
          TextButton(
            onPressed: _isLoading ? null : _submitForm,
            child: _isLoading
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  )
                : const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              _buildSectionTitle('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
              const SizedBox(height: 12),
              
              // –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ *',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              
              // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
              _buildSectionTitle('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: _categories.map((category) {
                  final isSelected = _selectedCategory == category['value'];
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        _selectedCategory = category['value']!;
                      });
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      decoration: BoxDecoration(
                        color: isSelected ? Colors.blue : Colors.grey[100],
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(
                          color: isSelected ? Colors.blue : Colors.grey[300]!,
                        ),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(category['icon']!, style: const TextStyle(fontSize: 16)),
                          const SizedBox(width: 4),
                          Text(
                            category['label']!,
                            style: TextStyle(
                              color: isSelected ? Colors.white : Colors.black87,
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                }).toList(),
              ),
              const SizedBox(height: 24),
              
              // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              _buildSectionTitle('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
              const SizedBox(height: 12),
              
              // –ê–¥—Ä–µ—Å
              TextFormField(
                controller: _addressController,
                decoration: const InputDecoration(
                  labelText: '–ê–¥—Ä–µ—Å *',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              
              // –¢–µ–ª–µ—Ñ–æ–Ω
              TextFormField(
                controller: _phoneController,
                decoration: const InputDecoration(
                  labelText: '–¢–µ–ª–µ—Ñ–æ–Ω',
                  border: OutlineInputBorder(),
                  prefixText: '+7 ',
                ),
                keyboardType: TextInputType.phone,
              ),
              const SizedBox(height: 16),
              
              // –í–µ–±-—Å–∞–π—Ç
              TextFormField(
                controller: _websiteController,
                decoration: const InputDecoration(
                  labelText: '–í–µ–±-—Å–∞–π—Ç',
                  border: OutlineInputBorder(),
                  prefixText: 'https://',
                ),
                keyboardType: TextInputType.url,
              ),
              const SizedBox(height: 24),
              
              // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
              _buildSectionTitle('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã'),
              const SizedBox(height: 12),
              
              TextFormField(
                controller: _openingHoursController,
                decoration: const InputDecoration(
                  labelText: '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã',
                  border: OutlineInputBorder(),
                  hintText: '–ü–Ω-–ü—Ç: 9:00-18:00, –°–±-–í—Å: 10:00-16:00',
                ),
              ),
              const SizedBox(height: 24),
              
              // –û–ø–∏—Å–∞–Ω–∏–µ
              _buildSectionTitle('–û–ø–∏—Å–∞–Ω–∏–µ'),
              const SizedBox(height: 12),
              
              TextFormField(
                controller: _descriptionController,
                maxLines: 4,
                decoration: const InputDecoration(
                  labelText: '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                  border: OutlineInputBorder(),
                  hintText: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...',
                ),
              ),
              const SizedBox(height: 24),
              
              // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
              _buildSectionTitle('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ'),
              const SizedBox(height: 12),
              
              Container(
                height: 200,
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey[300]!),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: GoogleMap(
                    initialCameraPosition: const CameraPosition(
                      target: LatLng(43.238949, 76.889709),
                      zoom: 15,
                    ),
                    onTap: (location) {
                      setState(() {
                        _selectedLocation = location;
                      });
                    },
                    markers: _selectedLocation != null
                        ? {
                            Marker(
                              markerId: const MarkerId('selected_location'),
                              position: _selectedLocation!,
                              infoWindow: const InfoWindow(
                                title: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                              ),
                            ),
                          }
                        : {},
                    onMapCreated: (controller) {
                      // –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞
                    },
                  ),
                ),
              ),
              const SizedBox(height: 8),
              Text(
                '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 12,
                ),
              ),
              const SizedBox(height: 24),
              
              // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submitForm,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: _isLoading
                      ? const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                            SizedBox(width: 12),
                            Text('–û—Ç–ø—Ä–∞–≤–∫–∞...'),
                          ],
                        )
                      : const Text(
                          '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
                          style: TextStyle(fontSize: 16),
                        ),
                ),
              ),
              const SizedBox(height: 16),
              
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.blue[50],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue[200]!),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info, color: Colors.blue[700], size: 20),
                        const SizedBox(width: 8),
                        Text(
                          '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            color: Colors.blue[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ.',
                      style: TextStyle(
                        color: Colors.blue[700],
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.w600,
      ),
    );
  }
  
  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }
    
    if (_selectedLocation == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ')),
      );
      return;
    }
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
      await Future.delayed(const Duration(seconds: 2));
      
      // –°–æ–∑–¥–∞–µ–º POI –æ–±—ä–µ–∫—Ç
      final poi = POI(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: _nameController.text,
        address: _addressController.text,
        position: _selectedLocation!,
        type: _selectedCategory,
        phone: _phoneController.text.isNotEmpty ? _phoneController.text : null,
        website: _websiteController.text.isNotEmpty ? _websiteController.text : null,
        description: _descriptionController.text.isNotEmpty ? _descriptionController.text : null,
        openingHours: _openingHoursController.text.isNotEmpty ? _openingHoursController.text : null,
        isBusinessListing: true,
      );
      
      // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      _showSuccessDialog();
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }
  
  void _showSuccessDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'),
        content: const Text(
          '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. '
          '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.',
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context); // –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
              Navigator.pop(context); // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
            },
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}

