import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/theme_provider.dart';

class OfflineMapsScreen extends StatefulWidget {
  const OfflineMapsScreen({super.key});

  @override
  State<OfflineMapsScreen> createState() => _OfflineMapsScreenState();
}

class _OfflineMapsScreenState extends State<OfflineMapsScreen> {
  final TextEditingController _searchController = TextEditingController();
  final List<Country> _countries = [
    Country(
      name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
      flag: 'üá∞üáø',
      cities: [
        City(
          name: '–ê–ª–º–∞—Ç—ã',
          districts: ['–ê–ª–∞—Ç–∞—É—Å–∫–∏–π —Ä–∞–π–æ–Ω', '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π', '–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π', '–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π', '–ú–µ–¥–µ—É—Å–∫–∏–π', '–ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–∏–π', '–¢—É—Ä–∫—Å–∏–±—Å–∫–∏–π'],
          size: '38–º–±',
        ),
        City(
          name: '–ê—Å—Ç–∞–Ω–∞',
          districts: ['–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π', '–ï—Å–∏–ª—å—Å–∫–∏–π', '–°–∞—Ä—ã–∞—Ä–∫–∏–Ω—Å–∫–∏–π'],
          size: '45–º–±',
        ),
        City(
          name: '–®—ã–º–∫–µ–Ω—Ç',
          districts: [],
          size: '32–º–±',
        ),
        City(
          name: '–ü–∞–≤–ª–æ–¥–∞—Ä',
          districts: [],
          size: '28–º–±',
        ),
        City(
          name: '–ê–∫—Ç–æ–±–µ',
          districts: [],
          size: '25–º–±',
        ),
        City(
          name: '–¢–∞—Ä–∞–∑',
          districts: [],
          size: '23–º–±',
        ),
        City(
          name: '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫',
          districts: [],
          size: '21–º–±',
        ),
        City(
          name: '–°–µ–º–µ–π',
          districts: [],
          size: '20–º–±',
        ),
        City(
          name: '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞',
          districts: [],
          size: '35–º–±',
        ),
        City(
          name: '–ö–æ—Å—Ç–∞–Ω–∞–π',
          districts: [],
          size: '18–º–±',
        ),
      ],
    ),
    Country(
      name: '–†–æ—Å—Å–∏—è',
      flag: 'üá∑üá∫',
      cities: [
        City(
          name: '–ú–æ—Å–∫–≤–∞',
          districts: ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–°–µ–≤–µ—Ä–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π', '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π', '–Æ–∂–Ω—ã–π', '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π', '–ó–∞–ø–∞–¥–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π'],
          size: '120–º–±',
        ),
        City(
          name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
          districts: ['–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π', '–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π', '–í—ã–±–æ—Ä–≥—Å–∫–∏–π', '–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ö–æ–ª–ø–∏–Ω—Å–∫–∏–π', '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π'],
          size: '95–º–±',
        ),
        City(
          name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
          districts: ['–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', '–ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–∏–π', '–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–õ–µ–Ω–∏–Ω—Å–∫–∏–π', '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π'],
          size: '42–º–±',
        ),
        City(
          name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
          districts: ['–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π', '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–õ–µ–Ω–∏–Ω—Å–∫–∏–π', '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', '–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π', '–ß–∫–∞–ª–æ–≤—Å–∫–∏–π'],
          size: '38–º–±',
        ),
        City(
          name: '–ö–∞–∑–∞–Ω—å',
          districts: ['–ê–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', '–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π', '–ö–∏—Ä–æ–≤—Å–∫–∏–π', '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π', '–ù–æ–≤–æ-–°–∞–≤–∏–Ω–æ–≤—Å–∫–∏–π', '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π', '–°–æ–≤–µ—Ç—Å–∫–∏–π'],
          size: '35–º–±',
        ),
      ],
    ),
    Country(
      name: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω',
      flag: 'üáπüá≤',
      cities: [
        City(
          name: '–ê—à—Ö–∞–±–∞–¥',
          districts: ['–ë–µ—Ä–∫–µ–Ω–∞—Ä—Å–∫–∏–π', '–ë–∞–≥—Ç—ã—è—Ä–ª—ã–∫—Å–∫–∏–π', '–ê–±–∞–¥–∞–Ω—Å–∫–∏–π', '–ê—Ä—á–∞–±–∏–ª—å—Å–∫–∏–π'],
          size: '25–º–±',
        ),
        City(
          name: '–¢—É—Ä–∫–º–µ–Ω–∞–±–∞—Ç',
          districts: [],
          size: '18–º–±',
        ),
        City(
          name: '–¢—É—Ä–∫–º–µ–Ω–±–∞—à–∏',
          districts: [],
          size: '15–º–±',
        ),
        City(
          name: '–ú–∞—Ä—ã',
          districts: [],
          size: '12–º–±',
        ),
      ],
    ),
    Country(
      name: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
      flag: 'üá∫üáø',
      cities: [
        City(
          name: '–¢–∞—à–∫–µ–Ω—Ç',
          districts: ['–ë–µ–∫—Ç–µ–º–∏—Ä—Å–∫–∏–π', '–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π', '–ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫—Å–∫–∏–π', '–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π', '–£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π', '–ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π', '–®–∞–π—Ö–∞–Ω—Ç–∞—Ö—É—Ä—Å–∫–∏–π', '–Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π'],
          size: '48–º–±',
        ),
        City(
          name: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
          districts: [],
          size: '28–º–±',
        ),
        City(
          name: '–ù–∞–º–∞–Ω–≥–∞–Ω',
          districts: [],
          size: '22–º–±',
        ),
        City(
          name: '–ê–Ω–¥–∏–∂–∞–Ω',
          districts: [],
          size: '20–º–±',
        ),
        City(
          name: '–ë—É—Ö–∞—Ä–∞',
          districts: [],
          size: '18–º–±',
        ),
      ],
    ),
    Country(
      name: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω',
      flag: 'üá∞üá¨',
      cities: [
        City(
          name: '–ë–∏—à–∫–µ–∫',
          districts: ['–õ–µ–Ω–∏–Ω—Å–∫–∏–π', '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π'],
          size: '30–º–±',
        ),
        City(
          name: '–û—à',
          districts: [],
          size: '22–º–±',
        ),
        City(
          name: '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥',
          districts: [],
          size: '15–º–±',
        ),
        City(
          name: '–¢–æ–∫–º–æ–∫',
          districts: [],
          size: '12–º–±',
        ),
      ],
    ),
    Country(
      name: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
      flag: 'üáπüáØ',
      cities: [
        City(
          name: '–î—É—à–∞–Ω–±–µ',
          districts: ['–ò—Å–º–æ–∏–ª–∏ –°–æ–º–æ–Ω–∏', '–°–∏–Ω–æ', '–§–∏—Ä–¥–∞–≤—Å–∏', '–®–æ—Ö–º–∞–Ω—Å—É—Ä'],
          size: '25–º–±',
        ),
        City(
          name: '–•—É–¥–∂–∞–Ω–¥',
          districts: [],
          size: '18–º–±',
        ),
        City(
          name: '–ö—É–ª—è–±',
          districts: [],
          size: '15–º–±',
        ),
        City(
          name: '–ë–æ—Ö—Ç–∞—Ä',
          districts: [],
          size: '12–º–±',
        ),
      ],
    ),
  ];

  List<Country> _filteredCountries = [];
  Map<String, bool> _downloadingCities = {};

  @override
  void initState() {
    super.initState();
    _filteredCountries = _countries;
    _searchController.addListener(_filterCountries);
  }

  @override
  void dispose() {
    _searchController.removeListener(_filterCountries);
    _searchController.dispose();
    super.dispose();
  }

  void _filterCountries() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      if (query.isEmpty) {
        _filteredCountries = _countries;
      } else {
        _filteredCountries = _countries.where((country) {
          return country.name.toLowerCase().contains(query) ||
              country.cities.any((city) => 
                  city.name.toLowerCase().contains(query) ||
                  city.districts.any((district) => district.toLowerCase().contains(query)));
        }).toList();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return Scaffold(
      backgroundColor: isDark ? const Color(0xFF151515) : Colors.white,
      appBar: AppBar(
        backgroundColor: isDark ? const Color(0xFF151515) : Colors.white,
        foregroundColor: isDark ? Colors.white : Colors.black,
        elevation: 0,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back,
            color: isDark ? Colors.white : Colors.black,
          ),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          '–û—Ñ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã',
          style: TextStyle(
            color: isDark ? Colors.white : Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Column(
        children: [
          // –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
          Container(
            margin: const EdgeInsets.all(16),
            child: Container(
              height: 56,
              decoration: BoxDecoration(
                color: isDark ? const Color(0xFF151515) : Colors.grey[100],
                borderRadius: BorderRadius.circular(50),
                border: Border.all(
                  color: isDark ? Colors.grey[700]! : Colors.grey[300]!,
                ),
              ),
              child: Row(
                children: [
                  Padding(
                    padding: const EdgeInsets.only(left: 20, right: 12),
                    child: Icon(
                      Icons.search,
                      color: isDark ? Colors.white70 : Colors.grey[600],
                      size: 22,
                    ),
                  ),
                  Expanded(
                    child: TextField(
                      controller: _searchController,
                      style: TextStyle(
                        color: isDark ? Colors.white : Colors.black87,
                        fontSize: 16,
                      ),
                      decoration: InputDecoration(
                        hintText: '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥',
                        hintStyle: TextStyle(
                          color: isDark ? Colors.white70 : Colors.grey[600],
                          fontSize: 16,
                        ),
                        border: InputBorder.none,
                        contentPadding: const EdgeInsets.symmetric(vertical: 16),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 8),
                    child: IconButton(
                      icon: Icon(
                        Icons.mic,
                        color: isDark ? Colors.white70 : Colors.grey[600],
                        size: 22,
                      ),
                      onPressed: () {
                        // TODO: Implement voice search
                      },
                    ),
                  ),
                  Container(
                    width: 40,
                    height: 40,
                    margin: const EdgeInsets.only(right: 8),
                    decoration: BoxDecoration(
                      color: isDark ? Colors.grey[700] : Colors.grey[200],
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: IconButton(
                      icon: Icon(
                        Icons.person,
                        color: isDark ? Colors.white70 : Colors.grey[600],
                        size: 20,
                      ),
                      onPressed: () {
                        // TODO: Navigate to profile
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
          Container(
            margin: const EdgeInsets.symmetric(horizontal: 16),
            child: Text(
              '–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: 30.2 –≥–± –∏–∑ 64–≥–±',
              style: TextStyle(
                color: isDark ? Colors.white : Colors.black87,
                fontSize: 14,
              ),
            ),
          ),

          const SizedBox(height: 16),

          // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              itemCount: _filteredCountries.length,
              itemBuilder: (context, index) {
                final country = _filteredCountries[index];
                return _buildCountrySection(country, isDark);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCountrySection(Country country, bool isDark) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω—ã
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16),
          child: Row(
            children: [
              Text(
                country.name,
                style: TextStyle(
                  color: isDark ? Colors.white : Colors.black87,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 12),
              Text(
                country.flag,
                style: const TextStyle(fontSize: 20),
              ),
            ],
          ),
        ),

        // –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        ...country.cities.map((city) => _buildCityItem(city, isDark)),
        
        const SizedBox(height: 24),
      ],
    );
  }

  Widget _buildCityItem(City city, bool isDark) {
    final isDownloading = _downloadingCities[city.name] == true;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: isDark ? Colors.grey[900] : Colors.grey[50],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isDark ? Colors.grey[700]! : Colors.grey[200]!,
        ),
      ),
      child: Row(
        children: [
          // –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
          Text(
            'üá∞üáø', // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
            style: const TextStyle(fontSize: 16),
          ),
          
          const SizedBox(width: 12),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  city.name,
                  style: TextStyle(
                    color: isDark ? Colors.white : Colors.black87,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                if (city.districts.isNotEmpty) ...[
                  const SizedBox(height: 4),
                  Text(
                    city.districts.join(', '),
                    style: TextStyle(
                      color: isDark ? Colors.grey[400] : Colors.grey[600],
                      fontSize: 12,
                    ),
                  ),
                ],
              ],
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
          Column(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: isDownloading ? Colors.grey[600] : Colors.blue,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: isDownloading
                    ? const Center(
                        child: SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        ),
                      )
                    : IconButton(
                        icon: const Icon(
                          Icons.download,
                          color: Colors.white,
                          size: 20,
                        ),
                        onPressed: () => _downloadCity(city.name),
                      ),
              ),
              const SizedBox(height: 4),
              Text(
                city.size,
                style: TextStyle(
                  color: Colors.blue,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Future<void> _downloadCity(String cityName) async {
    setState(() {
      _downloadingCities[cityName] = true;
    });

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    await Future.delayed(const Duration(seconds: 3));

    setState(() {
      _downloadingCities[cityName] = false;
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ö–∞—Ä—Ç–∞ $cityName —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'),
        backgroundColor: Colors.green,
      ),
    );
  }
}

class Country {
  final String name;
  final String flag;
  final List<City> cities;

  Country({
    required this.name,
    required this.flag,
    required this.cities,
  });
}

class City {
  final String name;
  final List<String> districts;
  final String size;

  City({
    required this.name,
    required this.districts,
    required this.size,
  });
}