import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import '../providers/map_provider.dart';
import '../providers/search_provider.dart';
import '../services/navigation_service.dart';
import '../widgets/route_options_widget.dart';

class RoutePlanningScreen extends StatefulWidget {
  final LatLng? startLocation;
  final LatLng? endLocation;
  
  const RoutePlanningScreen({
    super.key,
    this.startLocation,
    this.endLocation,
  });

  @override
  State<RoutePlanningScreen> createState() => _RoutePlanningScreenState();
}

class _RoutePlanningScreenState extends State<RoutePlanningScreen> {
  final TextEditingController _startController = TextEditingController();
  final TextEditingController _endController = TextEditingController();
  
  LatLng? _startPoint;
  LatLng? _endPoint;
  String _selectedMode = 'driving';
  bool _isCalculating = false;
  
  final List<Map<String, String>> _transportModes = [
    {'value': 'driving', 'label': '–ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ', 'icon': 'üöó'},
    {'value': 'walking', 'label': '–ü–µ—à–∫–æ–º', 'icon': 'üö∂'},
    {'value': 'cycling', 'label': '–ù–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ', 'icon': 'üö¥'},
  ];

  @override
  void initState() {
    super.initState();
    _startPoint = widget.startLocation;
    _endPoint = widget.endLocation;
    
    if (_startPoint != null) {
      _startController.text = '–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
    }
    if (_endPoint != null) {
      _endController.text = '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞';
    }
  }

  @override
  void dispose() {
    _startController.dispose();
    _endController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞'),
        actions: [
          if (_startPoint != null && _endPoint != null)
            TextButton(
              onPressed: _isCalculating ? null : _calculateRoute,
              child: _isCalculating
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : const Text('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å'),
            ),
        ],
      ),
      body: Column(
        children: [
          // –ü–æ–ª—è –≤–≤–æ–¥–∞ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
          Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
                _buildLocationField(
                  controller: _startController,
                  label: '–û—Ç–∫—É–¥–∞',
                  icon: Icons.my_location,
                  onTap: () => _selectLocation(true),
                ),
                const SizedBox(height: 8),
                // –ö–Ω–æ–ø–∫–∞ –æ–±–º–µ–Ω–∞ –º–µ—Å—Ç–∞–º–∏
                Center(
                  child: IconButton(
                    icon: const Icon(Icons.swap_vert),
                    onPressed: _swapLocations,
                  ),
                ),
                const SizedBox(height: 8),
                // –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
                _buildLocationField(
                  controller: _endController,
                  label: '–ö—É–¥–∞',
                  icon: Icons.location_on,
                  onTap: () => _selectLocation(false),
                ),
              ],
            ),
          ),
          
          const Divider(),
          
          // –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
          Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 12),
                Row(
                  children: _transportModes.map((mode) {
                    final isSelected = _selectedMode == mode['value'];
                    return Expanded(
                      child: GestureDetector(
                        onTap: () {
                          setState(() {
                            _selectedMode = mode['value']!;
                          });
                        },
                        child: Container(
                          margin: const EdgeInsets.symmetric(horizontal: 4),
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          decoration: BoxDecoration(
                            color: isSelected ? Colors.blue : Colors.grey[100],
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: isSelected ? Colors.blue : Colors.grey[300]!,
                            ),
                          ),
                          child: Column(
                            children: [
                              Text(
                                mode['icon']!,
                                style: const TextStyle(fontSize: 24),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                mode['label']!,
                                style: TextStyle(
                                  color: isSelected ? Colors.white : Colors.black87,
                                  fontSize: 12,
                                  fontWeight: FontWeight.w500,
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  }).toList(),
                ),
              ],
            ),
          ),
          
          const Divider(),
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
          const RouteOptionsWidget(),
          
          const Spacer(),
          
          // –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
          if (_startPoint != null && _endPoint != null)
            Container(
              padding: const EdgeInsets.all(16),
              child: SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isCalculating ? null : _calculateRoute,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: _isCalculating
                      ? const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                            SizedBox(width: 12),
                            Text('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...'),
                          ],
                        )
                      : const Text(
                          '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç',
                          style: TextStyle(fontSize: 16),
                        ),
                ),
              ),
            ),
        ],
      ),
    );
  }
  
  Widget _buildLocationField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey[300]!),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: [
            Icon(icon, color: Colors.grey[600]),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                controller.text.isEmpty ? label : controller.text,
                style: TextStyle(
                  color: controller.text.isEmpty ? Colors.grey[600] : Colors.black87,
                  fontSize: 16,
                ),
              ),
            ),
            Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey[400]),
          ],
        ),
      ),
    );
  }
  
  void _selectLocation(bool isStart) {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    final location = const LatLng(43.238949, 76.889709);
    
    setState(() {
      if (isStart) {
        _startPoint = location;
        _startController.text = '—É–ª. –ö–∞–Ω—ã—à–∞ –°–∞—Ç–ø–∞–µ–≤–∞, 22';
      } else {
        _endPoint = location;
        _endController.text = '—É–ª. –ê–±–∞—è, 150';
      }
    });
  }
  
  void _swapLocations() {
    setState(() {
      final tempPoint = _startPoint;
      final tempController = _startController.text;
      
      _startPoint = _endPoint;
      _endPoint = tempPoint;
      _startController.text = _endController.text;
      _endController.text = tempController;
    });
  }
  
  Future<void> _calculateRoute() async {
    if (_startPoint == null || _endPoint == null) return;
    
    setState(() {
      _isCalculating = true;
    });
    
    try {
      final route = await NavigationService.getRoute(
        start: _startPoint!,
        end: _endPoint!,
        mode: _selectedMode,
      );
      
      if (route != null) {
        context.read<MapProvider>().setRoute(route);
        Navigator.pop(context);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
        _showRouteInfo(route);
      } else {
        _showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç');
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    } finally {
      setState(() {
        _isCalculating = false;
      });
    }
  }
  
  void _showRouteInfo(route) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${route.distance.toStringAsFixed(1)} –∫–º'),
            Text('–í—Ä–µ–º—è –≤ –ø—É—Ç–∏: ${route.duration} –º–∏–Ω'),
            Text('–°–ø–æ—Å–æ–±: ${_getModeLabel(route.mode)}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
  
  String _getModeLabel(String mode) {
    switch (mode) {
      case 'driving':
        return '–ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ';
      case 'walking':
        return '–ü–µ—à–∫–æ–º';
      case 'cycling':
        return '–ù–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ';
      default:
        return mode;
    }
  }
  
  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }
}
