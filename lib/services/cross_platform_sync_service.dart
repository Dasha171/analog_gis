import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/user_model.dart';

class CrossPlatformSyncService {
  static final CrossPlatformSyncService _instance = CrossPlatformSyncService._internal();
  factory CrossPlatformSyncService() => _instance;
  CrossPlatformSyncService._internal();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
  static const String _syncKey = 'anal_gis_sync_data';
  static const String _lastSyncKey = 'anal_gis_last_sync';

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
  Future<void> syncUsers() async {
    try {
      print('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ú–ï–ñ–î–£ –ü–õ–ê–¢–§–û–†–ú–ê–ú–ò...');
      
      final prefs = await SharedPreferences.getInstance();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      final usersJson = prefs.getString('unified_users') ?? '[]';
      final users = (json.decode(usersJson) as List)
          .map((json) => User.fromJson(json))
          .toList();
      
      print('üîç –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}');
      for (final user in users) {
        print('  - ${user.email}: ${user.fullName} (${user.role})');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
      final syncData = {
        'users': users.map((u) => u.toJson()).toList(),
        'timestamp': DateTime.now().millisecondsSinceEpoch,
        'platform': _getPlatformName(),
      };
      
      await prefs.setString(_syncKey, json.encode(syncData));
      await prefs.setString(_lastSyncKey, DateTime.now().toIso8601String());
      
      print('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<List<User>> loadSyncedUsers() async {
    try {
      print('üì• –ó–ê–ì–†–£–ó–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•...');
      
      final prefs = await SharedPreferences.getInstance();
      final syncDataJson = prefs.getString(_syncKey);
      
      if (syncDataJson == null) {
        print('üîç –ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        return [];
      }
      
      final syncData = json.decode(syncDataJson) as Map<String, dynamic>;
      final usersJson = syncData['users'] as List;
      final timestamp = syncData['timestamp'] as int;
      final platform = syncData['platform'] as String;
      
      final users = usersJson.map((json) => User.fromJson(json)).toList();
      
      print('üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: $platform, –≤—Ä–µ–º—è: ${DateTime.fromMillisecondsSinceEpoch(timestamp)})');
      
      return users;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  String _getPlatformName() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å kIsWeb –∏–∑ foundation
    return 'mobile'; // –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ–≥–¥–∞ mobile, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<bool> needsSync() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastSync = prefs.getString(_lastSyncKey);
      
      if (lastSync == null) {
        return true;
      }
      
      final lastSyncTime = DateTime.parse(lastSync);
      final now = DateTime.now();
      final difference = now.difference(lastSyncTime);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç
      return difference.inMinutes > 15;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return true;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> initialize() async {
    try {
      print('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò...');
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
      if (await needsSync()) {
        print('üîç –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
        await syncUsers();
      } else {
        print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }
}
