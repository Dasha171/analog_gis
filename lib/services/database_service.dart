import 'dart:async';
import 'dart:convert';
import 'dart:math' as math;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/user_model.dart';
import '../models/organization_model.dart';
import '../models/advertisement_model.dart';
import '../models/friend_model.dart';
import '../models/manager_permissions_model.dart';

class DatabaseService {
  static final DatabaseService _instance = DatabaseService._internal();
  factory DatabaseService() => _instance;
  DatabaseService._internal();

  // ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==========

  Future<void> insertUser(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ email
      usersList.removeWhere((u) => u['email'] == user.email);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      usersList.add(user.toJson());
      
      await prefs.setString('users', json.encode(usersList));
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${user.email}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<List<User>> getAllUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ SharedPreferences: ${usersList.length}');
      return usersList.map((json) => User.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
      return [];
    }
  }

  Future<User?> getUserById(String id) async {
    try {
      final users = await getAllUsers();
      return users.firstWhere((user) => user.id == id);
    } catch (e) {
      return null;
    }
  }

  Future<User?> getUserByEmail(String email) async {
    try {
      final users = await getAllUsers();
      return users.firstWhere((user) => user.email == email);
    } catch (e) {
      return null;
    }
  }

  Future<void> updateUser(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final index = usersList.indexWhere((u) => u['id'] == user.id);
      if (index != -1) {
        usersList[index] = user.toJson();
        await prefs.setString('users', json.encode(usersList));
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.email}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<void> deleteUser(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      usersList.removeWhere((u) => u['id'] == id);
      await prefs.setString('users', json.encode(usersList));
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // ========== –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò ==========

  Future<void> insertOrganization(Organization organization) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å —Ç–∞–∫–∏–º –∂–µ id
      orgsList.removeWhere((o) => o['id'] == organization.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      orgsList.add(organization.toJson());
      
      await prefs.setString('organizations', json.encode(orgsList));
      print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${organization.name}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<List<Organization>> getAllOrganizations() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ SharedPreferences: ${orgsList.length}');
      return orgsList.map((json) => Organization.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: $e');
      return [];
    }
  }

  Future<List<Organization>> getOrganizationsByCategory(String category) async {
    try {
      final organizations = await getAllOrganizations();
      return organizations.where((org) => org.category == category).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return [];
    }
  }

  Future<List<Organization>> searchOrganizations(String query) async {
    try {
      final organizations = await getAllOrganizations();
      return organizations.where((org) => 
        org.name.toLowerCase().contains(query.toLowerCase()) ||
        org.description.toLowerCase().contains(query.toLowerCase())
      ).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: $e');
      return [];
    }
  }

  Future<List<Organization>> getOrganizationsNearby(double latitude, double longitude, double radiusKm) async {
    try {
      final organizations = await getAllOrganizations();
      return organizations.where((org) {
        final distance = _calculateDistance(latitude, longitude, org.latitude, org.longitude);
        return distance <= radiusKm;
      }).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: $e');
      return [];
    }
  }

  double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const double earthRadius = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    final double dLat = _degreesToRadians(lat2 - lat1);
    final double dLon = _degreesToRadians(lon2 - lon1);
    final double a = 
        math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(_degreesToRadians(lat1)) * math.cos(_degreesToRadians(lat2)) *
        math.sin(dLon / 2) * math.sin(dLon / 2);
    final double c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));
    return earthRadius * c;
  }

  double _degreesToRadians(double degrees) {
    return degrees * (math.pi / 180);
  }

  Future<void> updateOrganization(Organization organization) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      final index = orgsList.indexWhere((o) => o['id'] == organization.id);
      if (index != -1) {
        orgsList[index] = organization.toJson();
        await prefs.setString('organizations', json.encode(orgsList));
        print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${organization.name}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> deleteOrganization(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      // –£–¥–∞–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      orgsList.removeWhere((o) => o['id'] == id);
      await prefs.setString('organizations', json.encode(orgsList));
      print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  // ========== –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ==========

  Future<void> insertAdvertisement(Advertisement advertisement) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ id
      adsList.removeWhere((a) => a['id'] == advertisement.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      adsList.add(advertisement.toJson());
      
      await prefs.setString('advertisements', json.encode(adsList));
      print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${advertisement.title}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e');
    }
  }

  Future<List<Advertisement>> getAllAdvertisements() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ SharedPreferences: ${adsList.length}');
      return adsList.map((json) => Advertisement.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: $e');
      return [];
    }
  }

  Future<List<Advertisement>> getActiveAdvertisements() async {
    try {
      final advertisements = await getAllAdvertisements();
      final now = DateTime.now();
      return advertisements.where((ad) => 
        ad.isActive && 
        ad.startDate.isBefore(now) && 
        ad.endDate.isAfter(now)
      ).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: $e');
      return [];
    }
  }

  Future<void> updateAdvertisement(Advertisement advertisement) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      final index = adsList.indexWhere((a) => a['id'] == advertisement.id);
      if (index != -1) {
        adsList[index] = advertisement.toJson();
        await prefs.setString('advertisements', json.encode(adsList));
        print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${advertisement.title}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e');
    }
  }

  Future<void> deleteAdvertisement(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      adsList.removeWhere((a) => a['id'] == id);
      await prefs.setString('advertisements', json.encode(adsList));
      print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e');
    }
  }

  Future<void> incrementAdvertisementViews(String id) async {
    try {
      final advertisements = await getAllAdvertisements();
      final adIndex = advertisements.indexWhere((ad) => ad.id == id);
      if (adIndex != -1) {
        final updatedAd = advertisements[adIndex].copyWith(
          viewCount: advertisements[adIndex].viewCount + 1,
        );
        await updateAdvertisement(updatedAd);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: $e');
    }
  }

  Future<void> incrementAdvertisementClicks(String id) async {
    try {
      final advertisements = await getAllAdvertisements();
      final adIndex = advertisements.indexWhere((ad) => ad.id == id);
      if (adIndex != -1) {
        final updatedAd = advertisements[adIndex].copyWith(
          clickCount: advertisements[adIndex].clickCount + 1,
        );
        await updateAdvertisement(updatedAd);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤: $e');
    }
  }

  // ========== –î–†–£–ó–¨–Ø ==========

  Future<void> insertFriend(Friend friend) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä—É–≥–∞ —Å —Ç–∞–∫–∏–º –∂–µ id
      friendsList.removeWhere((f) => f['id'] == friend.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞
      friendsList.add(friend.toJson());
      
      await prefs.setString('friends', json.encode(friendsList));
      print('‚úÖ –î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω: ${friend.friendId}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: $e');
    }
  }

  Future<List<Friend>> getFriendsByUserId(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      final userFriends = friendsList
          .where((f) => f['userId'] == userId && f['status'] == 'accepted')
          .map((json) => Friend.fromJson(json))
          .toList();
      
      return userFriends;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: $e');
      return [];
    }
  }

  Future<List<Friend>> getPendingFriendsByUserId(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      final pendingFriends = friendsList
          .where((f) => f['friendId'] == userId && f['status'] == 'pending')
          .map((json) => Friend.fromJson(json))
          .toList();
      
      return pendingFriends;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥—Ä—É–∑–µ–π: $e');
      return [];
    }
  }

  Future<void> updateFriendStatus(String friendId, String newStatus) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∞
      final index = friendsList.indexWhere((f) => f['id'] == friendId);
      if (index != -1) {
        friendsList[index]['status'] = newStatus;
        if (newStatus == 'accepted') {
          friendsList[index]['acceptedAt'] = DateTime.now().toIso8601String();
        }
        await prefs.setString('friends', json.encode(friendsList));
        print('‚úÖ –°—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: $newStatus');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–≥–∞: $e');
    }
  }

  Future<void> updateFriendLocation(String friendId, double latitude, double longitude, String? locationName) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –¥—Ä—É–≥–∞
      final index = friendsList.indexWhere((f) => f['id'] == friendId);
      if (index != -1) {
        friendsList[index]['latitude'] = latitude;
        friendsList[index]['longitude'] = longitude;
        friendsList[index]['locationName'] = locationName;
        friendsList[index]['lastLocationUpdate'] = DateTime.now().toIso8601String();
        await prefs.setString('friends', json.encode(friendsList));
        print('‚úÖ –õ–æ–∫–∞—Ü–∏—è –¥—Ä—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –¥—Ä—É–≥–∞: $e');
    }
  }

  Future<List<Friend>> getFriendsWithLocation(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      final friendsWithLocation = friendsList
          .where((f) => 
            f['userId'] == userId && 
            f['status'] == 'accepted' && 
            f['shareLocation'] == 1 && 
            f['latitude'] != null && 
            f['longitude'] != null
          )
          .map((json) => Friend.fromJson(json))
          .toList();
      
      return friendsWithLocation;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —Å –ª–æ–∫–∞—Ü–∏–µ–π: $e');
      return [];
    }
  }

  Future<void> deleteFriend(String friendId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∞
      friendsList.removeWhere((f) => f['id'] == friendId);
      await prefs.setString('friends', json.encode(friendsList));
      print('‚úÖ –î—Ä—É–≥ —É–¥–∞–ª–µ–Ω: $friendId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: $e');
    }
  }

  // ========== –ú–ï–ù–ï–î–ñ–ï–†–´ –ò –†–ê–ó–†–ï–®–ï–ù–ò–Ø ==========

  Future<void> insertManagerPermissions(ManagerPermissions permissions) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ managerId
      permsList.removeWhere((p) => p['managerId'] == permissions.managerId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      permsList.add(permissions.toJson());
      
      await prefs.setString('manager_permissions', json.encode(permsList));
      print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${permissions.managerId}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  Future<ManagerPermissions?> getManagerPermissions(String managerId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      final managerPerms = permsList
          .where((p) => p['managerId'] == managerId)
          .map((json) => ManagerPermissions.fromJson(json))
          .toList();
      
      return managerPerms.isNotEmpty ? managerPerms.first : null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
      return null;
    }
  }

  Future<void> updateManagerPermissions(ManagerPermissions permissions) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final index = permsList.indexWhere((p) => p['managerId'] == permissions.managerId);
      if (index != -1) {
        permsList[index] = permissions.toJson();
        await prefs.setString('manager_permissions', json.encode(permsList));
        print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${permissions.managerId}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  Future<void> deleteManagerPermissions(String managerId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      // –£–¥–∞–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      permsList.removeWhere((p) => p['managerId'] == managerId);
      await prefs.setString('manager_permissions', json.encode(permsList));
      print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã: $managerId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  // ========== –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–û–î–´ ==========

  Future<void> clearAllData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('users');
      await prefs.remove('organizations');
      await prefs.remove('advertisements');
      await prefs.remove('friends');
      await prefs.remove('manager_permissions');
      print('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }
}