import 'dart:math';
import 'package:crypto/crypto.dart';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

class EmailService {
  static final EmailService _instance = EmailService._internal();
  factory EmailService() => _instance;
  EmailService._internal();

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –±—É–¥–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥—ã –≤ –ø–∞–º—è—Ç–∏
  final Map<String, String> _verificationCodes = {};
  final Map<String, DateTime> _codeExpiry = {};

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  String _generateVerificationCode() {
    final random = Random();
    return (100000 + random.nextInt(900000)).toString();
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
  Future<bool> sendVerificationCode(String email, {BuildContext? context}) async {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      final code = _generateVerificationCode();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (10 –º–∏–Ω—É—Ç)
      _verificationCodes[email] = code;
      _codeExpiry[email] = DateTime.now().add(const Duration(minutes: 10));
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ $email: $code');
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
      if (kIsWeb) {
        print('üîê –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø: $code');
        print('üìß Email: $email');
        print('‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–æ–¥–æ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      if (context != null) {
        _showCodeDialog(context, email, code);
      }
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
      await Future.delayed(const Duration(seconds: 1));
      
      return true;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: $e');
      return false;
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  void _showCodeDialog(BuildContext context, String email, String code) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF212121),
          title: const Text(
            '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            style: TextStyle(color: Colors.white),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text(
                '–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥:',
                style: TextStyle(color: Color(0xFF6C6C6C)),
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFF0C79FE).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: const Color(0xFF0C79FE)),
                ),
                child: Text(
                  code,
                  style: const TextStyle(
                    color: Color(0xFF0C79FE),
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    letterSpacing: 2,
                  ),
                ),
              ),
              const SizedBox(height: 8),
              Text(
                '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: $email',
                style: const TextStyle(
                  color: Color(0xFF6C6C6C),
                  fontSize: 12,
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text(
                '–ü–æ–Ω—è—Ç–Ω–æ',
                style: TextStyle(color: Color(0xFF0C79FE)),
              ),
            ),
          ],
        );
      },
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  bool verifyCode(String email, String code) {
    final storedCode = _verificationCodes[email];
    final expiryTime = _codeExpiry[email];
    
    if (storedCode == null || expiryTime == null) {
      return false;
    }
    
    if (DateTime.now().isAfter(expiryTime)) {
      // –ö–æ–¥ –∏—Å—Ç–µ–∫
      _verificationCodes.remove(email);
      _codeExpiry.remove(email);
      return false;
    }
    
    if (storedCode == code) {
      // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      _verificationCodes.remove(email);
      _codeExpiry.remove(email);
      return true;
    }
    
    return false;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è email
  bool hasActiveCode(String email) {
    final expiryTime = _codeExpiry[email];
    if (expiryTime == null) return false;
    
    if (DateTime.now().isAfter(expiryTime)) {
      _verificationCodes.remove(email);
      _codeExpiry.remove(email);
      return false;
    }
    
    return true;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int getRemainingTime(String email) {
    final expiryTime = _codeExpiry[email];
    if (expiryTime == null) return 0;
    
    final remaining = expiryTime.difference(DateTime.now()).inSeconds;
    return remaining > 0 ? remaining : 0;
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–æ–¥—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  void clearAllCodes() {
    _verificationCodes.clear();
    _codeExpiry.clear();
  }
}
