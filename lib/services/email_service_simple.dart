import 'dart:math';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';

class EmailServiceSimple {
  static final EmailServiceSimple _instance = EmailServiceSimple._internal();
  factory EmailServiceSimple() => _instance;
  EmailServiceSimple._internal();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ EmailJS (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è - –Ω–µ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ—á—Ç–∞)
  static const String _emailjsServiceId = 'service_6wa35ji'; // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® SERVICE ID
  static const String _emailjsTemplateId = 'template_7va537s'; // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® TEMPLATE ID
  static const String _emailjsUserId = 'Wwt7VHuG-ggU53oEX'; // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® USER ID
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gmail SMTP (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
  static const String _smtpHost = 'smtp.gmail.com';
  static const int _smtpPort = 587;
  static const String _smtpUsername = 'daralazareva171@gmail.com'; // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ü–ê–†–û–õ–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
  static const String _smtpPassword = 'your-app-password'; // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ü–ê–†–û–õ–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (16 —Å–∏–º–≤–æ–ª–æ–≤)
  
  /*
  üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï EMAILJS (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø):
  
  1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://www.emailjs.com/
  2. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å (Gmail, Outlook, Yahoo –∏ —Ç.–¥.)
  3. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω email
  4. –ü–æ–ª—É—á–∏—Ç–µ Service ID, Template ID –∏ User ID
  5. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ
  
  –ü—Ä–∏–º–µ—Ä:
  static const String _emailjsServiceId = 'service_abc123';
  static const String _emailjsTemplateId = 'template_xyz789';
  static const String _emailjsUserId = 'user_def456';
  
  üîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê - GMAIL SMTP:
  
  1. –°–æ–∑–¥–∞–π—Ç–µ Gmail –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  2. –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Google
  3. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: https://myaccount.google.com/apppasswords
  4. –ó–∞–º–µ–Ω–∏—Ç–µ 'your-email@gmail.com' –Ω–∞ –≤–∞—à Gmail
  5. –ó–∞–º–µ–Ω–∏—Ç–µ 'your-app-password' –Ω–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (16 —Å–∏–º–≤–æ–ª–æ–≤)
  
  –ü—Ä–∏–º–µ—Ä:
  static const String _smtpUsername = 'mymail@gmail.com';
  static const String _smtpPassword = 'abcd efgh ijkl mnop';
  */

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  String _generateVerificationCode() {
    final random = Random();
    return (100000 + random.nextInt(900000)).toString();
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
  Future<bool> sendVerificationCode(String email) async {
    try {
      final code = _generateVerificationCode();
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
      bool success = false;
      
      // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ EmailJS (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è - –Ω–µ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ—á—Ç–∞)
      if (kIsWeb) {
        print('üåê –í–µ–±-—Å—Ä–µ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º EmailJS...');
        success = await _sendViaEmailJS(email, code);
        print('üìß –†–µ–∑—É–ª—å—Ç–∞—Ç EmailJS: $success');
      } else {
        print('üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞, EmailJS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ SMTP (–µ—Å–ª–∏ EmailJS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞)
      if (!success) {
        print('üìß –ü—Ä–æ–±—É–µ–º Gmail SMTP...');
        success = await _sendViaGmail(email, code);
        print('üìß –†–µ–∑—É–ª—å—Ç–∞—Ç Gmail SMTP: $success');
      }
      
      if (success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        _saveCodeForVerification(email, code);
        print('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ $email: $code');
        return true;
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –¥–µ–º–æ
        _saveCodeForVerification(email, code);
        print('‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º. –ö–æ–¥ –¥–ª—è $email: $code');
        return true;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: $e');
      return false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ EmailJS
  Future<bool> _sendViaEmailJS(String email, String code) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (_emailjsServiceId == 'service_analgis' || 
          _emailjsTemplateId == 'template_verification' || 
          _emailjsUserId == 'user_analgis') {
        print('‚ö†Ô∏è EmailJS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ ID –≤ –∫–æ–¥–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑ EmailJS.');
        return false;
      }
      
      print('üîß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ EmailJS –Ω–∞ $email —Å –∫–æ–¥–æ–º $code');

              const url = 'https://api.emailjs.com/api/v1.0/email/send';
              
              final requestBody = {
                'service_id': _emailjsServiceId,
                'template_id': _emailjsTemplateId,
                'user_id': _emailjsUserId,
                'template_params': {
                  'to_email': email,
                  'passcode': code,
                  'subject': 'Anal GIS - –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                  'message': '–í–∞—à –∫–æ–¥: $code',
                  'from_name': 'Anal GIS',
                  'reply_to': 'daralazareva171@gmail.com',
                }
              };
      
      print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ EmailJS:');
      print('   Service ID: $_emailjsServiceId');
      print('   Template ID: $_emailjsTemplateId');
      print('   User ID: $_emailjsUserId');
      print('   Email: $email');
      print('   Code: $code');

      final response = await http.post(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(requestBody),
      );

      print('üì• –û—Ç–≤–µ—Ç –æ—Ç EmailJS:');
      print('   Status Code: ${response.statusCode}');
      print('   Response Body: ${response.body}');

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ EmailJS: $e');
      return false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Gmail SMTP
  Future<bool> _sendViaGmail(String email, String code) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (_smtpUsername == 'your-email@gmail.com' || _smtpPassword == 'your-app-password') {
        print('‚ö†Ô∏è Gmail –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ —Ä–µ–∂–∏–º.');
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º SMTP —Å–µ—Ä–≤–µ—Ä
      final smtpServer = SmtpServer(
        _smtpHost,
        port: _smtpPort,
        username: _smtpUsername,
        password: _smtpPassword,
        allowInsecure: false,
        ssl: false,
      );

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      final message = Message()
        ..from = Address(_smtpUsername, 'Anal GIS')
        ..recipients.add(email)
        ..subject = '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - Anal GIS'
        ..html = _buildEmailTemplate(code);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
      final sendReport = await send(message, smtpServer);
      return sendReport != null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ Gmail SMTP: $e');
      return false;
    }
  }

  /// HTML —à–∞–±–ª–æ–Ω –¥–ª—è email
  String _buildEmailTemplate(String code) {
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</title>
        <style>
            body { font-family: Arial, sans-serif; background-color: #f5f5f5; margin: 0; padding: 20px; }
            .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; margin-bottom: 30px; }
            .logo { color: #0C79FE; font-size: 24px; font-weight: bold; }
            .code-box { background-color: #0C79FE; color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; }
            .code { font-size: 32px; font-weight: bold; letter-spacing: 4px; }
            .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">Anal GIS</div>
                <h2>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
            </div>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
            <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Anal GIS –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
            <div class="code-box">
                <div class="code">$code</div>
            </div>
            <p><strong>–í–∞–∂–Ω–æ:</strong> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Anal GIS, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            <div class="footer">
                <p>¬© 2024 Anal GIS. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
        </div>
    </body>
    </html>
    ''';
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  void _saveCodeForVerification(String email, String code) {
    _verificationCodes[email] = code;
    _codeExpiry[email] = DateTime.now().add(const Duration(minutes: 10));
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  bool verifyCode(String email, String code) {
    final storedCode = _verificationCodes[email];
    final expiryTime = _codeExpiry[email];
    
    if (storedCode == null || expiryTime == null) {
      return false;
    }
    
    if (DateTime.now().isAfter(expiryTime)) {
      _verificationCodes.remove(email);
      _codeExpiry.remove(email);
      return false;
    }
    
    if (storedCode == code) {
      _verificationCodes.remove(email);
      _codeExpiry.remove(email);
      return true;
    }
    
    return false;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int getRemainingTime(String email) {
    final expiryTime = _codeExpiry[email];
    if (expiryTime == null) return 0;
    
    final remaining = expiryTime.difference(DateTime.now()).inSeconds;
    return remaining > 0 ? remaining : 0;
  }

  /// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
  Future<bool> resendCode(String email) async {
    return await sendVerificationCode(email);
  }

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤
  final Map<String, String> _verificationCodes = {};
  final Map<String, DateTime> _codeExpiry = {};
}
