import 'dart:math' as math;
import 'package:flutter/material.dart';
import '../models/route_model.dart';
import '../models/organization_model.dart';

class RouteService {
  static final RouteService _instance = RouteService._internal();
  factory RouteService() => _instance;
  RouteService._internal();

  /// –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  Future<List<SearchResult>> searchAddresses(String query) async {
    try {
      print('üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤: $query');
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
      final addresses = <SearchResult>[];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ê–ª–º–∞—Ç—ã
      final popularAddresses = [
        '—É–ª. –ê–±–∞—è, 150',
        '–ø—Ä. –ê–±–∞—è, 1',
        '—É–ª. –î–æ—Å—Ç—ã–∫, 200',
        '—É–ª. –°–∞—Ç–ø–∞–µ–≤–∞, 22',
        '—É–ª. –ñ–µ–ª—Ç–æ–∫—Å–∞–Ω, 100',
        '–ø—Ä. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞, 50',
        '—É–ª. –¢–æ–ª–µ –±–∏, 75',
        '—É–ª. –§—É—Ä–º–∞–Ω–æ–≤–∞, 25',
      ];
      
      for (final address in popularAddresses) {
        if (address.toLowerCase().contains(query.toLowerCase())) {
          addresses.add(SearchResult(
            id: 'address_${address.hashCode}',
            name: address,
            type: 'address',
            latitude: 43.222 + (math.Random().nextDouble() - 0.5) * 0.1,
            longitude: 76.8512 + (math.Random().nextDouble() - 0.5) * 0.1,
            description: '–ê–¥—Ä–µ—Å –≤ –ê–ª–º–∞—Ç—ã',
          ));
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      final organizations = await _getOrganizations();
      for (final org in organizations) {
        if (org.name.toLowerCase().contains(query.toLowerCase()) ||
            org.address.toLowerCase().contains(query.toLowerCase())) {
          addresses.add(SearchResult(
            id: org.id,
            name: org.name,
            type: 'organization',
            latitude: org.latitude,
            longitude: org.longitude,
            description: org.description,
            organization: org,
          ));
        }
      }
      
      print('üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${addresses.length}');
      return addresses;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  Future<List<Organization>> _getOrganizations() async {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    return [
      Organization(
        id: '1',
        name: 'MegaIce',
        description: '–õ–µ–¥–æ–≤—ã–π –∫–∞—Ç–æ–∫',
        address: '—É–ª. –°–∞—Ç–ø–∞–µ–≤–∞, 22',
        latitude: 43.222,
        longitude: 76.8512,
        category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        phone: '+7 727 123 4567',
        website: 'https://megoice.kz',
        rating: 4.5,
        ownerId: 'admin',
        email: 'megoice@example.com',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Organization(
        id: '2',
        name: '–î–∏–∞–ª–µ–∫—Ç',
        description: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
        address: '—É–ª. –ê–±–∞—è, 150',
        latitude: 43.225,
        longitude: 76.855,
        category: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
        phone: '+7 727 234 5678',
        website: 'https://dialekt.kz',
        rating: 4.2,
        ownerId: 'admin',
        email: 'dialekt@example.com',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Organization(
        id: '3',
        name: 'Deco Interior Home',
        description: '–ú–∞–≥–∞–∑–∏–Ω –º–µ–±–µ–ª–∏',
        address: '–ø—Ä. –ê–±–∞—è, 1',
        latitude: 43.220,
        longitude: 76.850,
        category: '–ú–∞–≥–∞–∑–∏–Ω—ã',
        phone: '+7 727 345 6789',
        website: 'https://deco.kz',
        rating: 4.0,
        ownerId: 'admin',
        email: 'deco@example.com',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  Future<RouteResult> buildRoute({
    required double startLat,
    required double startLng,
    required double endLat,
    required double endLng,
    required TransportType transportType,
  }) async {
    try {
      print('üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: ${transportType.name}');
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      final distance = _calculateDistance(startLat, startLng, endLat, endLng);
      final duration = _calculateDuration(distance, transportType);
      final cost = _calculateCost(distance, transportType);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      final points = _generateRoutePoints(startLat, startLng, endLat, endLng);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
      RouteColor routeColor;
      if (transportType == TransportType.car) {
        routeColor = math.Random().nextBool() ? RouteColor.green : RouteColor.blue;
      } else {
        routeColor = RouteColor.blue;
      }
      
      final route = RouteResult(
        id: 'route_${DateTime.now().millisecondsSinceEpoch}',
        startLat: startLat,
        startLng: startLng,
        endLat: endLat,
        endLng: endLng,
        transportType: transportType,
        distance: distance,
        duration: duration,
        cost: cost,
        points: points,
        color: routeColor,
        hasTraffic: routeColor == RouteColor.blue,
        hasAccidents: math.Random().nextBool(),
        steps: _generateRouteSteps(distance, duration, transportType),
      );
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${duration.inMinutes} –º–∏–Ω, ${distance.toStringAsFixed(1)} –∫–º');
      return route;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      rethrow;
    }
  }

  /// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
  double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    const double earthRadius = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    final double dLat = _degreesToRadians(lat2 - lat1);
    final double dLng = _degreesToRadians(lng2 - lng1);
    final double a = 
        math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(_degreesToRadians(lat1)) * math.cos(_degreesToRadians(lat2)) *
        math.sin(dLng / 2) * math.sin(dLng / 2);
    final double c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));
    return earthRadius * c;
  }

  double _degreesToRadians(double degrees) {
    return degrees * (math.pi / 180);
  }

  /// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
  Duration _calculateDuration(double distance, TransportType transportType) {
    double speedKmh;
    
    switch (transportType) {
      case TransportType.car:
        speedKmh = 40; // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ
        break;
      case TransportType.bus:
        speedKmh = 25; // –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        break;
      case TransportType.walking:
        speedKmh = 5; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—à–∫–æ–º
        break;
      case TransportType.taxi:
        speedKmh = 35; // –°–∫–æ—Ä–æ—Å—Ç—å —Ç–∞–∫—Å–∏
        break;
      case TransportType.bicycle:
        speedKmh = 15; // –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ
        break;
      case TransportType.scooter:
        speedKmh = 20; // –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ —Å–∞–º–æ–∫–∞—Ç–µ
        break;
      case TransportType.truck:
        speedKmh = 30; // –°–∫–æ—Ä–æ—Å—Ç—å –≥—Ä—É–∑–æ–≤–∏–∫–∞
        break;
    }
    
    final hours = distance / speedKmh;
    return Duration(minutes: (hours * 60).round());
  }

  /// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  double _calculateCost(double distance, TransportType transportType) {
    switch (transportType) {
      case TransportType.car:
        return distance * 15; // 15 —Ç–µ–Ω–≥–µ –∑–∞ –∫–º
      case TransportType.bus:
        return 90; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
      case TransportType.walking:
        return 0;
      case TransportType.taxi:
        return distance * 25; // 25 —Ç–µ–Ω–≥–µ –∑–∞ –∫–º
      case TransportType.bicycle:
        return distance * 5; // 5 —Ç–µ–Ω–≥–µ –∑–∞ –∫–º
      case TransportType.scooter:
        return distance * 8; // 8 —Ç–µ–Ω–≥–µ –∑–∞ –∫–º
      case TransportType.truck:
        return distance * 20; // 20 —Ç–µ–Ω–≥–µ –∑–∞ –∫–º
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
  List<LatLng> _generateRoutePoints(double startLat, double startLng, double endLat, double endLng) {
    final points = <LatLng>[];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
    points.add(LatLng(startLat, startLng));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    final steps = 10;
    for (int i = 1; i < steps; i++) {
      final ratio = i / steps;
      final lat = startLat + (endLat - startLat) * ratio + (math.Random().nextDouble() - 0.5) * 0.001;
      final lng = startLng + (endLng - startLng) * ratio + (math.Random().nextDouble() - 0.5) * 0.001;
      points.add(LatLng(lat, lng));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
    points.add(LatLng(endLat, endLng));
    
    return points;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
  List<RouteStep> _generateRouteSteps(double distance, Duration duration, TransportType transportType) {
    final steps = <RouteStep>[];
    
    if (transportType == TransportType.bus) {
      // –î–ª—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
      steps.add(RouteStep(
        instruction: '–ò–¥–∏—Ç–µ –ø–µ—à–∫–æ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
        duration: Duration(minutes: 6),
        distance: 0.5,
        transportType: TransportType.walking,
      ));
      
      steps.add(RouteStep(
        instruction: '–ê–≤—Ç–æ–±—É—Å ‚Ññ14',
        duration: Duration(minutes: 25),
        distance: 8.0,
        transportType: TransportType.bus,
      ));
      
      steps.add(RouteStep(
        instruction: '–ê–≤—Ç–æ–±—É—Å ‚Ññ5',
        duration: Duration(minutes: 15),
        distance: 4.5,
        transportType: TransportType.bus,
      ));
      
      steps.add(RouteStep(
        instruction: '–ò–¥–∏—Ç–µ –ø–µ—à–∫–æ–º –¥–æ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        duration: Duration(minutes: 2),
        distance: 0.2,
        transportType: TransportType.walking,
      ));
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      steps.add(RouteStep(
        instruction: _getTransportInstruction(transportType),
        duration: duration,
        distance: distance,
        transportType: transportType,
      ));
    }
    
    return steps;
  }

  String _getTransportInstruction(TransportType transportType) {
    switch (transportType) {
      case TransportType.car:
        return '–ü–æ–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ';
      case TransportType.bus:
        return '–ü–æ–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –∞–≤—Ç–æ–±—É—Å–µ';
      case TransportType.walking:
        return '–ò–¥–∏—Ç–µ –ø–µ—à–∫–æ–º';
      case TransportType.taxi:
        return '–ü–æ–µ–∑–∂–∞–π—Ç–µ –Ω–∞ —Ç–∞–∫—Å–∏';
      case TransportType.bicycle:
        return '–ï–∑–∂–∞–π—Ç–µ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ';
      case TransportType.scooter:
        return '–ï–∑–∂–∞–π—Ç–µ –Ω–∞ —Å–∞–º–æ–∫–∞—Ç–µ';
      case TransportType.truck:
        return '–ü–æ–µ–∑–∂–∞–π—Ç–µ –Ω–∞ –≥—Ä—É–∑–æ–≤–∏–∫–µ';
    }
  }
}

/// –ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
class SearchResult {
  final String id;
  final String name;
  final String type; // 'address' –∏–ª–∏ 'organization'
  final double latitude;
  final double longitude;
  final String description;
  final Organization? organization;

  SearchResult({
    required this.id,
    required this.name,
    required this.type,
    required this.latitude,
    required this.longitude,
    required this.description,
    this.organization,
  });
}
