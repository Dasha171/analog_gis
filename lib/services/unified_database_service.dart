import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/user_model.dart';
import '../models/organization_model.dart';
import '../models/advertisement_model.dart';
import '../models/friend_model.dart';
import '../models/manager_permissions_model.dart';
import '../models/business_user_model.dart';
import 'cross_platform_sync_service.dart';

/// –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SharedPreferences –¥–ª—è –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (–≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω–∞—è)
class UnifiedDatabaseService {
  static final UnifiedDatabaseService _instance = UnifiedDatabaseService._internal();
  factory UnifiedDatabaseService() => _instance;
  UnifiedDatabaseService._internal();

  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  Map<String, dynamic> _usersCache = {};
  Map<String, dynamic> _organizationsCache = {};
  Map<String, dynamic> _advertisementsCache = {};
  bool _cacheInitialized = false;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
  Future<void> _initializeCache() async {
    if (_cacheInitialized) return;
    
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
      final usersJson = prefs.getString('unified_users') ?? '[]';
      _usersCache = {'data': json.decode(usersJson), 'timestamp': DateTime.now().millisecondsSinceEpoch};
      
      _cacheInitialized = true;
      print('‚úÖ –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: $e');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> saveUserInvitationCode(String userId, String code) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final codesJson = prefs.getString('user_invitation_codes') ?? '{}';
      final Map<String, dynamic> codesMap = json.decode(codesJson);
      
      codesMap[userId] = code;
      await prefs.setString('user_invitation_codes', json.encode(codesMap));
      print('‚úÖ –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $code');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<String?> getUserInvitationCode(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final codesJson = prefs.getString('user_invitation_codes') ?? '{}';
      final Map<String, dynamic> codesMap = json.decode(codesJson);
      
      return codesMap[userId] as String?;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  Future<String?> getUserIdByInvitationCode(String code) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final codesJson = prefs.getString('user_invitation_codes') ?? '{}';
      final Map<String, dynamic> codesMap = json.decode(codesJson);
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
      for (final entry in codesMap.entries) {
        if (entry.value == code) {
          return entry.key;
        }
      }
      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É: $e');
      return null;
    }
  }

  Future<void> saveUser(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('unified_users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      print('üîç –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: ${user.email}');
      print('üîç –¢–ï–ö–£–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${usersList.length}');
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ email
      final beforeCount = usersList.length;
      usersList.removeWhere((u) => u['email'] == user.email);
      final afterRemoveCount = usersList.length;
      print('üîç –£–î–ê–õ–ï–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${beforeCount - afterRemoveCount}');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      usersList.add(user.toJson());
      print('üîç –î–û–ë–ê–í–õ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${user.email}');
      
      await prefs.setString('unified_users', json.encode(usersList));
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${user.email} (–≤—Å–µ–≥–æ: ${usersList.length})');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      final savedJson = prefs.getString('unified_users') ?? '[]';
      final savedList = json.decode(savedJson) as List;
      print('üîç –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø: ${savedList.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SharedPreferences');
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
      await CrossPlatformSyncService().syncUsers();
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<List<User>> getAllUsers() async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final syncedUsers = await CrossPlatformSyncService().loadSyncedUsers();
      if (syncedUsers.isNotEmpty) {
        print('üîç –ó–ê–ì–†–£–ó–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${syncedUsers.length}');
        return syncedUsers;
      }
      
      // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('unified_users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      print('üîç –ó–ê–ì–†–£–ó–ö–ê –õ–û–ö–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${usersList.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      for (final userJson in usersList) {
        print('  - ${userJson['email']}: ${userJson['firstName']} ${userJson['lastName']} (${userJson['role']})');
      }
      
      return usersList.map((json) => User.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
      return [];
    }
  }

  Future<User?> getUserByEmail(String email) async {
    try {
      final users = await getAllUsers();
      return users.firstWhere((user) => user.email == email);
    } catch (e) {
      return null;
    }
  }

  Future<User?> getUserById(String id) async {
    try {
      final users = await getAllUsers();
      return users.firstWhere((user) => user.id == id);
    } catch (e) {
      return null;
    }
  }

  Future<void> updateUser(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('unified_users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final index = usersList.indexWhere((u) => u['id'] == user.id);
      if (index != -1) {
        usersList[index] = user.toJson();
        await prefs.setString('unified_users', json.encode(usersList));
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.email}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<void> deleteUser(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final usersJson = prefs.getString('unified_users') ?? '[]';
      final List<dynamic> usersList = json.decode(usersJson);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      usersList.removeWhere((u) => u['id'] == id);
      await prefs.setString('unified_users', json.encode(usersList));
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // ========== –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò ==========

  Future<void> saveOrganization(Organization organization) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('unified_organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å —Ç–∞–∫–∏–º –∂–µ id
      orgsList.removeWhere((o) => o['id'] == organization.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      orgsList.add(organization.toJson());
      
      await prefs.setString('unified_organizations', json.encode(orgsList));
      print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${organization.name}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<List<Organization>> getAllOrganizations() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('unified_organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${orgsList.length}');
      return orgsList.map((json) => Organization.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: $e');
      return [];
    }
  }

  Future<void> updateOrganization(Organization organization) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('unified_organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      final index = orgsList.indexWhere((o) => o['id'] == organization.id);
      if (index != -1) {
        orgsList[index] = organization.toJson();
        await prefs.setString('unified_organizations', json.encode(orgsList));
        print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${organization.name}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> deleteOrganization(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final orgsJson = prefs.getString('unified_organizations') ?? '[]';
      final List<dynamic> orgsList = json.decode(orgsJson);
      
      // –£–¥–∞–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      orgsList.removeWhere((o) => o['id'] == id);
      await prefs.setString('unified_organizations', json.encode(orgsList));
      print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  // ========== –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ==========

  Future<void> saveAdvertisement(Advertisement advertisement) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('unified_advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ id
      adsList.removeWhere((a) => a['id'] == advertisement.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      adsList.add(advertisement.toJson());
      
      await prefs.setString('unified_advertisements', json.encode(adsList));
      print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${advertisement.title}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e');
    }
  }

  Future<List<Advertisement>> getAllAdvertisements() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('unified_advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${adsList.length}');
      return adsList.map((json) => Advertisement.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: $e');
      return [];
    }
  }

  Future<void> updateAdvertisement(Advertisement advertisement) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('unified_advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      final index = adsList.indexWhere((a) => a['id'] == advertisement.id);
      if (index != -1) {
        adsList[index] = advertisement.toJson();
        await prefs.setString('unified_advertisements', json.encode(adsList));
        print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${advertisement.title}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e');
    }
  }

  Future<void> deleteAdvertisement(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final adsJson = prefs.getString('unified_advertisements') ?? '[]';
      final List<dynamic> adsList = json.decode(adsJson);
      
      // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      adsList.removeWhere((a) => a['id'] == id);
      await prefs.setString('unified_advertisements', json.encode(adsList));
      print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: $e');
    }
  }

  // ========== –î–†–£–ó–¨–Ø ==========

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∞
  Future<void> saveFriend(Friend friend) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä—É–≥–∞ —Å —Ç–∞–∫–∏–º –∂–µ id
      friendsList.removeWhere((f) => f['id'] == friend.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞
      friendsList.add(friend.toJson());
      
      await prefs.setString('unified_friends', json.encode(friendsList));
      print('‚úÖ –î—Ä—É–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${friend.friendId}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∞: $e');
    }
  }

  // –í—Å—Ç–∞–≤–∫–∞ –¥—Ä—É–≥–∞ (–∞–ª–∏–∞—Å –¥–ª—è saveFriend)
  Future<void> insertFriend(Friend friend) async {
    await saveFriend(friend);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<Friend>> getFriendsByUserId(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      return friendsList
          .where((f) => f['userId'] == userId && f['status'] == 'accepted')
          .map((f) => Friend.fromJson(f as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: $e');
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–≥–∞
  Future<void> updateFriendStatus(String friendId, String status) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      for (int i = 0; i < friendsList.length; i++) {
        if (friendsList[i]['id'] == friendId) {
          friendsList[i]['status'] = status;
          if (status == 'accepted') {
            friendsList[i]['acceptedAt'] = DateTime.now().toIso8601String();
          }
          break;
        }
      }
      
      await prefs.setString('unified_friends', json.encode(friendsList));
      print('‚úÖ –°—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: $friendId -> $status');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–≥–∞: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥—Ä—É–≥–∞
  Future<void> updateFriendLocation(String friendId, double latitude, double longitude, String? locationName) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      for (int i = 0; i < friendsList.length; i++) {
        if (friendsList[i]['id'] == friendId) {
          friendsList[i]['latitude'] = latitude;
          friendsList[i]['longitude'] = longitude;
          friendsList[i]['locationName'] = locationName;
          friendsList[i]['lastLocationUpdate'] = DateTime.now().toIso8601String();
          break;
        }
      }
      
      await prefs.setString('unified_friends', json.encode(friendsList));
      print('‚úÖ –õ–æ–∫–∞—Ü–∏—è –¥—Ä—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $friendId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –¥—Ä—É–≥–∞: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π —Å –ª–æ–∫–∞—Ü–∏–µ–π
  Future<List<Friend>> getFriendsWithLocation(String userId) async {
    try {
      final friends = await getFriendsByUserId(userId);
      return friends.where((f) => f.latitude != null && f.longitude != null).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —Å –ª–æ–∫–∞—Ü–∏–µ–π: $e');
      return [];
    }
  }

  Future<List<Friend>> getAllFriends() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥—Ä—É–∑—å—è: ${friendsList.length}');
      return friendsList.map((json) => Friend.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: $e');
      return [];
    }
  }

  Future<List<Friend>> getPendingFriendsByUserId(String userId) async {
    try {
      final friends = await getAllFriends();
      return friends.where((f) => f.friendId == userId && f.status == 'pending').toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥—Ä—É–∑–µ–π: $e');
      return [];
    }
  }

  Future<void> updateFriend(Friend friend) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∞
      final index = friendsList.indexWhere((f) => f['id'] == friend.id);
      if (index != -1) {
        friendsList[index] = friend.toJson();
        await prefs.setString('unified_friends', json.encode(friendsList));
        print('‚úÖ –î—Ä—É–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${friend.friendId}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: $e');
    }
  }

  Future<void> deleteFriend(String id) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final friendsJson = prefs.getString('unified_friends') ?? '[]';
      final List<dynamic> friendsList = json.decode(friendsJson);
      
      // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∞
      friendsList.removeWhere((f) => f['id'] == id);
      await prefs.setString('unified_friends', json.encode(friendsList));
      print('‚úÖ –î—Ä—É–≥ —É–¥–∞–ª–µ–Ω: $id');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: $e');
    }
  }

  // ========== –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í ==========

  Future<void> saveManagerPermissions(ManagerPermissions permissions) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('unified_manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ managerId
      permsList.removeWhere((p) => p['managerId'] == permissions.managerId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      permsList.add(permissions.toJson());
      
      await prefs.setString('unified_manager_permissions', json.encode(permsList));
      print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${permissions.managerId}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  Future<List<ManagerPermissions>> getAllManagerPermissions() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('unified_manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${permsList.length}');
      return permsList.map((json) => ManagerPermissions.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: $e');
      return [];
    }
  }

  Future<ManagerPermissions?> getManagerPermissions(String managerId) async {
    try {
      final permissions = await getAllManagerPermissions();
      return permissions.firstWhere((p) => p.managerId == managerId);
    } catch (e) {
      return null;
    }
  }

  Future<void> updateManagerPermissions(ManagerPermissions permissions) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('unified_manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final index = permsList.indexWhere((p) => p['managerId'] == permissions.managerId);
      if (index != -1) {
        permsList[index] = permissions.toJson();
        await prefs.setString('unified_manager_permissions', json.encode(permsList));
        print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${permissions.managerId}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  Future<void> deleteManagerPermissions(String managerId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final permsJson = prefs.getString('unified_manager_permissions') ?? '[]';
      final List<dynamic> permsList = json.decode(permsJson);
      
      // –£–¥–∞–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      permsList.removeWhere((p) => p['managerId'] == managerId);
      await prefs.setString('unified_manager_permissions', json.encode(permsList));
      print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã: $managerId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: $e');
    }
  }

  // ========== –ë–ò–ó–ù–ï–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==========

  Future<void> saveBusinessUser(BusinessUser businessUser) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final businessUsersJson = prefs.getString('unified_business_users') ?? '[]';
      final List<dynamic> businessUsersList = json.decode(businessUsersJson);
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ email
      businessUsersList.removeWhere((u) => u['email'] == businessUser.email);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      businessUsersList.add(businessUser.toJson());
      
      await prefs.setString('unified_business_users', json.encode(businessUsersList));
      print('‚úÖ –ë–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${businessUser.email}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<List<BusinessUser>> getAllBusinessUsers() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final businessUsersJson = prefs.getString('unified_business_users') ?? '[]';
      final List<dynamic> businessUsersList = json.decode(businessUsersJson);
      
      print('üîç –ü–æ–ª—É—á–µ–Ω—ã –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${businessUsersList.length}');
      return businessUsersList.map((json) => BusinessUser.fromJson(json)).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
      return [];
    }
  }

  Future<BusinessUser?> getBusinessUserByEmail(String email) async {
    try {
      final businessUsers = await getAllBusinessUsers();
      return businessUsers.firstWhere((user) => user.email == email);
    } catch (e) {
      return null;
    }
  }

  // ========== –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–û–î–´ ==========

  Future<void> clearAllData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('unified_users');
      await prefs.remove('unified_organizations');
      await prefs.remove('unified_advertisements');
      await prefs.remove('unified_friends');
      await prefs.remove('unified_manager_permissions');
      await prefs.remove('unified_business_users');
      print('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  // ========== –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• ==========

  /// –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π –≤ –Ω–æ–≤—ã–µ
  Future<void> migrateData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      final oldUsersJson = prefs.getString('users') ?? '[]';
      if (oldUsersJson != '[]') {
        await prefs.setString('unified_users', oldUsersJson);
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      final oldOrgsJson = prefs.getString('organizations') ?? '[]';
      if (oldOrgsJson != '[]') {
        await prefs.setString('unified_organizations', oldOrgsJson);
        print('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      final oldAdsJson = prefs.getString('advertisements') ?? '[]';
      if (oldAdsJson != '[]') {
        await prefs.setString('unified_advertisements', oldAdsJson);
        print('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π
      final oldFriendsJson = prefs.getString('friends') ?? '[]';
      if (oldFriendsJson != '[]') {
        await prefs.setString('unified_friends', oldFriendsJson);
        print('‚úÖ –î—Ä—É–∑—å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      final oldPermsJson = prefs.getString('manager_permissions') ?? '[]';
      if (oldPermsJson != '[]') {
        await prefs.setString('unified_manager_permissions', oldPermsJson);
        print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }
      
      print('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }
}
